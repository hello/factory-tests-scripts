////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//File Name:			Hello_Morpheus_MP_Script_Rev1.1.jts
//Customer: 			Hello
//Project:   			Hello_Morpheus
//Creator:   			Ping Wei
//Revision:			Rev1.1
//Released:			2015/8/3
//Description:		
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Revision History:
//Rev1.0: update file name from Hello_Morpheus_DVT_Product_Rev3.3_brandon.jts to Hello_Morpheus_MP_Script_Rev1.0.jts 2015/7/31 Dave Huang
//Rev1.1: update humidity offset ($oh) from 1.76 to 2.87
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//********************************Main Function******************************************//

SetFinalizeFunction("Cleanup");
SetFailFunction("FailConfig"); 
SetAbortFunction("FailConfig"); 

$PassHtmlLocation1 = "E:\\html\\";
//~ $PassHtmlLocation2 = "E:\\html\\";
$PassHtmlLocation2 = "\\\\huafile01\\Hello_data\\test log\\Morpheus\\";
ConfigurableHtmlReportWriter_ConfigureLocations($PassHtmlLocation2,$PassHtmlLocation1);
call Gb_BarcodeCheck();
call Gb_Instrument_Init();
$return= SerialSendMilliseconds($Userinterface_Handle, "#SK3$\r\n", "", 50);  //lock door

call BootCheck1();// fast boot check with log level 40

call BootTopBoard();

call Gb14_Prox();

call Gb01_TOPver_Check();
call ID_check();
// reset gesture count
$return= SerialSendMilliseconds($Launchpad_Handle, "gesture_count\r\n" , "", 100);
call Gb21_GestureCnt();// reset gesture count before run this test
//reboot
$return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50);  //sample switch off
SleepMilliseconds(300);
$return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50);  //sample switch on
SleepMilliseconds(100);
call BootCheck();// fast boot check with log level 40

//~ Sleep(10);//3
call Gb10_SD_Card_Read_Write();//2015-7-18
	//sample play
$return= SerialSendMilliseconds($Launchpad_Handle, "p 55 48000  RINGTONE/tone.raw\r\n" , "", 100);
$MicHandler=CopyVariable($Launchpad_Handle1);

call Gb00_OCT();
Sleep(10);

$TestName="Speaker OCT Get";
call Gb20_OCTget();
$return= SerialSendMilliseconds($Launchpad_Handle, "s\r\n" , "", 100);  

$return= SerialSendMilliseconds($Launchpad_Handle1, "p 55 48000  RINGTONE/tone.raw\r\n" , "", 100);  
$MicHandler=CopyVariable($Launchpad_Handle);
call Gb00_OCT();//speaker
Sleep(10);

$TestName="Mic OCT Get";
call Gb20_OCTget();
$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n" , "", 100); //stop the sound
SerialSendMilliseconds($Userinterface_Handle, "#SK6$\r\n", "", 150);  //
//~ $return= SerialSendMilliseconds($Launchpad_Handle, "loglevel 20\r\n", "", 1000);
$return= SerialSendMilliseconds($Launchpad_Handle, "antsel 2\r\n", "", 1000);
$TestName="Ant2_rssi";
call Gb02_rssi();
$return= SerialSendMilliseconds($Launchpad_Handle, "antsel 1\r\n", "", 1000);
$TestName="Ant1_rssi";
call Gb02_rssi();
//~ call Gb10_SD_Card_Read_Write();
call dust_sensor();//2015-7-17
call Gb10_VER_Check();
call Gb08_LED_OFF();
SleepMilliseconds(1500);// wait for LED to off, 1.5 second modified by bk
//~ SleepMilliseconds(3000);// wait for LED to off, 1.5 second modified by bk
call Gb13_lightOFF();

call Gb08_LED_ON();
SleepMilliseconds(1500);// wait for LED to off, 1.5 second modified by bk
call Gb13_lightON();
call Gb08_LED_OFF();
call Gb03_connect();
SleepMilliseconds(1000);
call Gb13_lightOFF();
SleepMilliseconds(2000);
call Gb03_Status();
call Gb04_disconnect();
call Gb03_DisconnectStatus();
//~ call ZOGLAB_Measure();
//~ call Gb12_temp();
call humid_delta();

SerialSendMilliseconds($Userinterface_Handle, "#RK6$\r\n", "", 50);  //



End ;
////////////////////////////////////////main Script///////////////////////////////////////////////////////

function Gb_BarcodeCheck()
{
  UpdateStatus("**************************** Gb01_BarcodeCheck*********************************");  
   $nTry=0;
  Label labBarcodeCheckLoop:
  $value = StringLength($SerialNumber);         //M0401144900062
  if ($value != 21&&$value != 20)
  {
    goto labBarcodeError;
  }
  
  $bit = StringStartsWith($SerialNumber,"91000008W3","TRUE");//91000008W301150500819
  $bit2 = StringStartsWith($SerialNumber,"91000008WA","TRUE");
  $bit3 = StringStartsWith($SerialNumber,"91000008BA","TRUE");
  $bit1 = StringStartsWith($SerialNumber,"91000008B3","TRUE");//91000008WA01150900051
  if (!$bit&&!$bit1)
  {
    if (!$bit2&&!$bit3)
   {
      goto labBarcodeError;
   }
  }
  
  SetSerialNumberField($SerialNumber);
  UpdateStatus($SerialNumber);
  UpdateStatus("=============== Barcode Check PASS =============");
  UpdateStatus("============================================");
 RecordMeasurementPassFail("Barcode check","passed","passed",true,true);
  return;
  
  Label labBarcodeError:
  $nTry = $nTry + 1;
  if ($nTry > 3)
  {
    UpdateStatus("=============== Barcode Check Fail =============");
    $Failed_Tests = "Barcode Check Fail";
    Fail("Error Serial Number!");
  }
  
  $SerialNumber = OperatorInputPrompt("Please Input the Serial number,\n Then Press OK continute");
  goto labBarcodeCheckLoop;
  return;
}
function Gb_Instrument_Init()
{
  UpdateStatus("**************************** Instrument_Init*********************************");  
  //OperatorPrompt("Connect USB cable","OK");
  // power on
   SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
   SerialSendMilliseconds($IT6322_Handle, "OUTP 1\n");
  
   Sleep(1);
   //~ SerialSendMilliseconds($Userinterface_Handle, "#SK4$\r\n", "", 50); 
  // Open the form.
  $LoadWin = OperatorPromptNonBlocking("Place in UUT, plug in power", 200, 400);
  
 $return= SerialSendMilliseconds($Userinterface_Handle, "#IN1$\r\n", "OK", 1000); //waveon
 
  $return= SerialSendMilliseconds($Userinterface_Handle, "#IN1$\r\n", "OK", 1000); //waveon
  UpdateStatus($return);
  $Plugged = StringContains($return,"1");
  Label UUT_CheckIn:
   $Max_Retry=1000;
   $Cont_Retry=0;
   while (($Plugged==false) && ($Cont_Retry < $Max_Retry))
  {
    $return= SerialSendMilliseconds($Userinterface_Handle, "#IN1$\r\n", "OK", 1000); //waveon
    UpdateStatus($return);
    $Plugged = StringContains($return,"1");    
    SleepMilliseconds(100);
    $Cont_Retry = $Cont_Retry + 1;
  }   
 
 OperatorPromptNonBlockingUpdateMessage($LoadWin, "Powerup UUT");
   
  $Sample_Serial = 8;
  //~ $UUT_Serial = 10;
  $UUT_Serial = 7;
  $Launchpad_Handle = SerialOpen($UUT_Serial,115200,8,"N",1);   
  $Launchpad_Handle1 = SerialOpen($Sample_Serial,115200,8,"N",1); 
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50); //set to normal pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50);  //sample switch on
  
  
  SerialSendMilliseconds($IT6322_Handle, "INST THI\n", "", 50);  
  $CH3_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 200); 
  UpdateStatus($CH3_return);
  $CH3_return=$CH3_return*1000;
  UpdateStatus($CH3_return);
  
  $tmpMsg="Current draw: " + $CH3_return ;
  OperatorPromptNonBlockingUpdateMessage($LoadWin, $tmpMsg);
  
   $Max_Retry=1000;
   $Cont_Retry=0;
   while (($CH3_return < 150) && ($Cont_Retry < $Max_Retry))
  {
    $CH3_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 200);
    UpdateStatus($CH3_return);
    $CH3_return=$CH3_return*1000;
    UpdateStatus($CH3_return); 
	
	$tmpMsg="Please plug in UUT, Current draw < 0.1A : " + $CH3_return ;
    OperatorPromptNonBlockingUpdateMessage($LoadWin, $tmpMsg);
	
	SleepMilliseconds(100);
    $Cont_Retry = $Cont_Retry + 1;
  }  
   
  if ($CH3_return < 0.1)
  {
    CloseForm($LoadWin);
  RecordMeasurementPassFail("instrument init","failed","failed",true,false);
  }
  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK2$\r\n", "", 50); //indicator to operator to test
  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#IN1$\r\n", "OK", 1000); //waveon
  UpdateStatus($return);
  $Plugged = StringContains($return,"1");    
  SleepMilliseconds(100);
  if(!$Plugged)
  {
    OperatorPromptNonBlockingUpdateMessage($LoadWin, "USB 没插接好请重新接好!");
    goto UUT_CheckIn;
  }
  OperatorPromptNonBlockingUpdateMessage($LoadWin, "Push in the door");
  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#IN4$\r\n", "OK", 1000); //door close
  UpdateStatus($return);  
  $frontDoor = StringContains($return,"1");
  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#IN5$\r\n", "OK", 1000); //door close
  UpdateStatus($return);
  $RightDoor = StringContains($return,"1");
  
  $LeftDoor= SerialSendMilliseconds($Userinterface_Handle, "#IN6$\r\n", "OK", 1000); //door close
  UpdateStatus($LeftDoor);
  $LeftDoor = StringContains($return,"1");

   $Max_Retry=1000;
   $Cont_Retry=0;
   while ((($RightDoor==false) ||($LeftDoor==false) || ($frontDoor==false) )&& ($Cont_Retry < $Max_Retry))
  {
    $return= SerialSendMilliseconds($Userinterface_Handle, "#IN4$\r\n", "OK", 1000); //door close
    UpdateStatus($return);  
    $frontDoor = StringContains($return,"1");
  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#IN5$\r\n", "OK", 1000); //door close
    UpdateStatus($return);
    $RightDoor = StringContains($return,"1");
  
    $LeftDoor= SerialSendMilliseconds($Userinterface_Handle, "#IN6$\r\n", "OK", 1000); //door close
    UpdateStatus($LeftDoor);
    $LeftDoor = StringContains($return,"1");    
	
	SleepMilliseconds(100);
    $Cont_Retry = $Cont_Retry + 1;
  } 
   CloseForm($LoadWin);
    
  
  RecordMeasurementPassFail("instrument init","passed","passed",true,true);
   
  return;
}

function BootCheck()
{
   SetTestName("BootCheck")
  UpdateStatus("****************************BootCheck*********************************"); 
  
 $return1="";
  $count=0;
  while($count < 20)
  {
  $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);  
  UpdateStatus($return);
     $return = StringCat($return1, $return);
    $return1=$return;
    UpdateStatus("****************return************\n");
    UpdateStatus($return);
    UpdateStatus("****************************\n");
    UpdateStatus("**************return1**************\n");
    UpdateStatus($return1);
    UpdateStatus("****************************\n");
  //~ $Result = StringContains($return,"FreeRTOS");
  $Result = StringContains($return,"RTOS");
  
   if($Result)
   {
     break;
   }
  SleepMilliseconds(100);
  $count=$count+1;
 }
  SerialSendMilliseconds($Launchpad_Handle, "loglevel 40\r\n", "", 1000); 
 SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 100); 

   //sample board
   SerialSendMilliseconds($Launchpad_Handle1, "loglevel 40\r\n", "", 1000); 
   SerialSendMilliseconds($Launchpad_Handle1, "led\r\n", "", 100);
   SerialSendMilliseconds($Launchpad_Handle1, "led stop\r\n", "", 100); 
    
  
 RecordMeasurementPassFail("FreeRTOS found",$Result,"passed",true,$Result);
  return;
}

function BootCheck1()
{
   SetTestName("BootCheck")
  UpdateStatus("****************************BootCheck*********************************"); 
  
 $return1="";
  $count=0;
  while($count < 20)
  {
  $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);  
  UpdateStatus($return);
     $return = StringCat($return1, $return);
    $return1=$return;
    UpdateStatus("****************return************\n");
    UpdateStatus($return);
    UpdateStatus("****************************\n");
    UpdateStatus("**************return1**************\n");
    UpdateStatus($return1);
    UpdateStatus("****************************\n");
  //~ $Result = StringContains($return,"FreeRTOS");
  $Result = StringContains($return,"RTOS");
  
   if($Result)
   {
     break;
   }
  SleepMilliseconds(100);
  $count=$count+1;
 }
 SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 100); 

   //sample board
   SerialSendMilliseconds($Launchpad_Handle1, "loglevel 40\r\n", "", 1000); 
   SerialSendMilliseconds($Launchpad_Handle1, "led\r\n", "", 100);
   SerialSendMilliseconds($Launchpad_Handle1, "led stop\r\n", "", 100); 
    
  
 RecordMeasurementPassFail("FreeRTOS found",$Result,"passed",true,$Result);
  return;
}
function BootTopBoard()
{
   SetTestName("BootTopBoard")
  UpdateStatus("****************************BootTopBoard*********************************"); 
  $return1="";
  $count=0;
  $return= SerialSendMilliseconds($Launchpad_Handle, "boot\r\n", "", 1000); 
  while($count < 20)
  {
  $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);  
  UpdateStatus($return);
    $return = StringCat($return1, $return);
    $return1=$return;
    UpdateStatus("****************return************\n");
    UpdateStatus($return);
    UpdateStatus("****************************\n");
    UpdateStatus("**************return1**************\n");
    UpdateStatus($return1);
    UpdateStatus("****************************\n");
  //~ $Result = StringContains($return,"FreeRTOS");
  $Result = StringContains($return,"Start polling");
  
   if($Result)
   {
     break;
   }
  return;
}
}

function Gb10_VER_Check()
{
  $Result = false;
  $Result1 = false;
  $Result2 = false;
  $TestName = "Mid board FW version";
  SetTestName($TestName);
  $VER_return="";
$VER_return1 = SerialSendMilliseconds($Launchpad_Handle, "ver\r\n", "", 100); 

  $cont =0;
  while( $cont < 3)
  {
  
  $VER_return=$VER_return+$VER_return1;
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  UpdateStatus($VER_return);
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  
  
  
$VerCount=0;
Label RetryVera:
  UpdateStatus($VER_return);
//  $SerRtn=$VER_return;
//      call filterSymbol();
//      $VER_return=$SerRtn;
  $ExpectedStr = StringContains($VER_return,"ver:");
  if ((!$ExpectedStr) && ($VerCount <= 30))
  {
    $VER_return = SerialSendMilliseconds($Launchpad_Handle, "", "", 100);
	UpdateStatus("Retry...");
	$VerCount=$VerCount+1;
	goto RetryVera;
  } 
  
  $VER_length = StringLength($VER_return);
  if($VER_length > 8)
  {
    break;
  }
  
  SleepMilliseconds(100);
  $cont = $cont +1;
  $VER_return1 = SerialSendMilliseconds($Launchpad_Handle, "", "", 100); 
  }

 
  //~ $VER_Num = StringCut($VER_return,"ver: ",1);
  $VER_Num = StringCut($VER_return,"ver: ",8);
  
  UpdateStatus($VER_Num);
  //~ $Exp_VER ="1f13531a";
  $Exp_VER ="5b38a87c";
  //~ $Exp_VER2 ="2b50fcdf";
  $Exp_VER2 ="6ec19eb9";
  $Result1 = StringComparison($VER_Num,$Exp_VER,"==");
  $Result2 = StringComparison($VER_Num,$Exp_VER2,"==");
  if($Result1 || $Result2)
  {
     $Result = true;
  }
  RecordMeasurementPassFail($TestName,$VER_Num,"Sting",true,$Result);
  return;
}

function Gb10_ProdVER_Check()
{
  $Result = false;
  $TestName = "Check Production FW version";
  SetTestName($TestName);

  $cont =0;
  while( $cont < 3)
  {
  
  $VER_return = SerialSendMilliseconds($Launchpad_Handle, "ver\r\n", "", 100); 
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  UpdateStatus($VER_return);
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
$VerCount=0;
Label RetryVerb:
  UpdateStatus($VER_return);
//  $SerRtn=$VER_return;
//      call filterSymbol();
//      $VER_return=$SerRtn;
  $ExpectedStr = StringContains($VER_return,"ver:");
  if ((!$ExpectedStr) && ($VerCount <= 30))
  {
    $VER_return = SerialSendMilliseconds($Launchpad_Handle, "", "", 100);
	UpdateStatus("Retry...");
	$VerCount=$VerCount+1;
	goto RetryVerb;
  } 
  
  $VER_length = StringLength($VER_return);
  if($VER_length > 8)
  {
    break;
  }
  
  SleepMilliseconds(100);
  $cont = $cont +1;
  }

 
  //~ $VER_Num = StringCut($VER_return,"ver: ",1);
  $VER_Num = StringCut($VER_return,"ver: ",8);
  
  UpdateStatus($VER_Num);
  $Exp_VER ="43d87d7c";
  $Result = StringComparison($VER_Num,$Exp_VER,"==");
  RecordMeasurementPassFail($TestName,$VER_Num,"Sting",true,$Result);
 
  return;
}


function Gb00_OCT()
{
   SetTestName("Gb00_OCT")
  UpdateStatus("****************************Gb00_OCT*********************************"); 

  
  //uut record
  $return= SerialSendMilliseconds($MicHandler, "oct\r\n", "", 100);  
  UpdateStatus($return);

  return; 
}

function ID_check()
{
   SetTestName("ID_check")
  UpdateStatus("****************************ID_check*********************************"); 
  
  //uut record
  $return= SerialSendMilliseconds($Launchpad_Handle, "^ id\r\n", "", 300);  
  UpdateStatus($return);
  $returnString = StringParse($return,"<data>","</data>");
  RecordMeasurementPassFail("ID_check",$returnString,"id",true,true);	
  return; 
}


function Gb01_TOPver_Check()
{
  SetTestName("Gb01_TOPver_Check")
  UpdateStatus("****************************Gb01_echo_hello*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=5;
  $Result=false;
   $Result0=false;
  $return_num="";
  $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "^ ver\r\n", "", 500);
  $return = $return+ $return1;
  //SleepMilliseconds(350);
  $return1= SerialSendMilliseconds($Launchpad_Handle, "^ ver\r\n", "", 500);
 
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return = $return+ $return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");

    $Pattern = "0.7.6";	
    $Pattern2 = "0.5.3.1";
    ($Success,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
    ($Success2,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern2);
	if ($Success||$Success2)
	{
//	   $Result = StringContains($return,"0.5.3"); //+echo hello
//	   if ($Result)
//	   {
	     break;
//	   }	  
	}
	$return1= SerialSendMilliseconds($Launchpad_Handle, "^ ver\r\n", "", 700);
	SleepMilliseconds(500);
       $Cont_Retry= $Cont_Retry + 1;
	//~ $return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 200);  
  }
  if($Success||$Success2)
  {
    if($Success)
  {
    $return_num="0.7.6";
  }
   if($Success2)
  {
    $return_num="0.5.3.1";
  }
     $Result0=true;
  }
  RecordMeasurementPassFail("top board FW version",$return_num,"bool",true,$Result0);	
 //$return= SerialSendMilliseconds($Launchpad_Handle, "^ dtm\r\n", "", 1000);  
  //~ UpdateStatus($return);
  return;
}


function Gb02_rssi()
{
  
  //$TestName="Gb02_rssi";
  //~ $SendCmd="scan";
  $SendCmd="rssi";
  //~ $CmdTimeOut=5000;
  $CmdTimeOut=1500;
  $UpperLimit=0;
  $LowerLimit=-50;
  //$Pattern = "TP-LINK_A1A2AC (-?)\\d{1,2}";
  $Max_Retry=15;
//  call GeneralTest1();
  
   $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label rssi_Retry:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    UpdateStatus("^^^^^^^^^^^^return^^^^^^^^^^^^");
    UpdateStatus($CmdRtn1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
  //	$TempStr=$SendCmd + "\r\n";
   //~ $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut); 
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    UpdateStatus("^^^^^^^^^^^^return2^^^^^^^^^^^^");
    UpdateStatus($CmdRtn1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    $CmdRtn=$CmdRtn+$CmdRtn1;
      UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");

	$Pattern = "TP-LINK_A1A2AC (-?)\\d{1,2}";
	UpdateStatus($Pattern);
	($FrameFound1,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
	 UpdateStatus("^^^^^^^^^^ee^^^^^^^^^^^^^");
    UpdateStatus($FrameFound1);
	UpdateStatus($Result_Value);
	 UpdateStatus("^^^^^^^^^^ee^^^^^^^^^^^^^");
	
	$Pattern = "(-?)\\d{2,3}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($Result_Value,$Pattern);
    UpdateStatus($FrameFound);
	 UpdateStatus("^^^^^^^^^^ff^^^^^^^^^^^^^");

	UpdateStatus($Result_Value);
	 UpdateStatus("^^^^^^^^^^efe^^^^^^^^^^^^^");
    if(($FrameFound) && ($FrameFound1==true))
    {
	  UpdateStatus("Frame found!");
	  break;
    }
      SleepMilliseconds(200);      
    if($Cont_Retry==5)
    {
      $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    }
   }
	 // OperatorPrompt("Programming Completed","OK");
    //~ //$Result_Value = StringParse($CmdRtn,",","dB");
	UpdateStatus($Result_Value);	
				if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				  UpdateStatus("not in spec, retry");
				  $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
				  SleepMilliseconds(500);
				  goto rssi_Retry;
				}		
	
	
		
	
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

  return;
}

function Gb02_rssia()
{
  SetTestName("Gb02_rssi")
  UpdateStatus("****************************Gb02_rssi*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;  
  $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "rssi\r\n", "", 2000);
    $return = $return+ $return1;
	
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {	
    $return = $return+ $return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    
    $Pattern = "TP-LINK_A1A2AC";	
    ($Success,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
	
	// successful of getting 1st pattern
	if ($Success)
	{
       break;	  
	}
	SleepMilliseconds(1000);
    $Cont_Retry= $Cont_Retry + 1;
	$return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);
  }
  RecordMeasurementPassFail("Gb02_rssi",$Success,"bool",true,$Success);	//TP-LINK_A1A2AC
  
  return;
}

function Gb03_connect()
{
  SetTestName("Gb03_connect")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
  
   $return= SerialSendMilliseconds($Launchpad_Handle, "connect TP-LINK_A1A2AC key 0\r\n", "", 1000);  
    UpdateStatus($return);

  
    RecordMeasurementPassFail("Wifi_connect","passed","bool",true,true);	//TP-LINK_A1A2AC
    return ;
}

function Gb03_Status()
{
  SetTestName("Gb03_Status")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
  $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "status\r\n", "", 1000);  
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return= $return+$return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    

	   $Result = StringContains($return,"IP=192.168.1."); //+echo hello
	   if ($Result)
	   {
	     break;
	   }	  
  $return2= SerialSendMilliseconds($Launchpad_Handle, "disconnect\r\n", "", 100); 
	   Sleep(3);
   $return1= SerialSendMilliseconds($Launchpad_Handle, "connect TP-LINK_A1A2AC key 0\r\n", "", 3500);  
   
	//~ UpdateStatus($return);
    
	SleepMilliseconds(100);
    $Cont_Retry= $Cont_Retry + 1;
    $return1= SerialSendMilliseconds($Launchpad_Handle, "status\r\n", "", 1000);  
    $return= $return+$return1;
  }
  
    RecordMeasurementPassFail("Wifi_connect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
    return ;
}

function Gb03_DisconnectStatus()
{
  SetTestName("Gb03_DisconnectStatus")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
   $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "status\r\n", "", 500);  
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return= $return+$return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    

	   $Result = StringContains($return,"IP=0.0.0.0"); //+echo hello
	   if ($Result)
	   {
	     break;
	   }	  

	SleepMilliseconds(100);
    $Cont_Retry= $Cont_Retry + 1;
	$return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 500); 
  }
  
    RecordMeasurementPassFail("Wifi_connect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
    return ;
}

function Gb04_disconnect()
{
  SetTestName("Gb04_disconnect")
  UpdateStatus("****************************Gb04_disconnect*********************************"); 
  $return= SerialSendMilliseconds($Launchpad_Handle, "disconnect\r\n", "", 100);  

 
  RecordMeasurementPassFail("Wifi_disconnect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
  return ;
}


function Gb08_LED_ON()
{
  SetTestName("Gb08_LED_ON")
  UpdateStatus("****************************Gb08_LED_ON*********************************"); 
  $count = 0;
   Label LED_On_retry:
  if($count < 10)
  {
   //$return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 0 1 0\r\n", "", 100); 
    $return= SerialSendMilliseconds($Launchpad_Handle, "led\r\n", "", 500);  
   UpdateStatus($return);
   $Result = StringContains($return,"led"); //+echo hello
  if(!$Result)
  {
    $return= SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 100); 
    $count = $count + 1;
    SleepMilliseconds(100);
    goto LED_On_retry;   
  }
 }
  RecordMeasurementPassFail("LED ON",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}

function Gb08_LED_OFF()
{
  SetTestName("Gb08_LED_OFF")
  UpdateStatus("****************************Gb08_LED_OFF*********************************"); 
  $count = 0;
   Label LED_Off_retry:
  if($count < 10)
  {
  // $return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 1 1 0\r\n", "", 100);  
  $return= SerialSendMilliseconds($Launchpad_Handle1, "led stop\r\n", "", 500);  // request from ben to ensure sample is off
   UpdateStatus($return);

  
  $return= SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 500);  
   UpdateStatus($return);
   $Result = StringContains($return,"led stop"); //+echo hello
  if(!$Result)
  {
    $count = $count + 1;
    SleepMilliseconds(100);
    goto LED_Off_retry;
  }
 }
  RecordMeasurementPassFail("LED OFF",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}
function Gb08_LED_1stOFF()
{
  SetTestName("Gb08_LED_OFF")
  UpdateStatus("****************************Gb08_LED_OFF*********************************"); 

  // $return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 1 1 0\r\n", "", 100);  
   
  $return= SerialSendMilliseconds($Launchpad_Handle, "animate stop\r\n", "", 500);  
   UpdateStatus($return);
   $Result = StringContains($return,"animate stop"); //+echo hello

  RecordMeasurementPassFail("LED OFF",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}



function Gb10_SD_Card_Read_Write()
{
    SetTestName("SD Test")
  UpdateStatus("****************************SD_Card_Read_Write*********************************"); 
   
  $return2= SerialSendMilliseconds($Launchpad_Handle, "cd RINGTONE\r\n" , "", 1000);  //
   UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return2);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	SerialPurge($Launchpad_Handle);
	 $return1= SerialSendMilliseconds($Launchpad_Handle, "ls\r\n", "", 100);  //   
 UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	$return=$return1;
	
  $count=0;
  while($count < 50)
    {
   $return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 300);  //
  
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	$return=$return+$return1;
  $Result = StringContains($return,"File(s)");
      
   if($Result )
      {
	break;
      }
      $count=$count+1;
    }
  
  $Result1 = StringContains($return,"tone.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR005.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR004.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR003.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR002.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR001.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"pink.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG004.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG003.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG001.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW006.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW005.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW004.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW003.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW001.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG005.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG004.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG003.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG001.raw");  
  $Result=$Result1 && $Result;
  
 
 RecordMeasurementPassFail("RINGTONE",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
  return;
}

function ZOGLAB_Measure()
{

  SetTestName("ZOGLAB_Measure")
  UpdateStatus("****************************ZOGLAB_Measure*********************************");
  $receiveBuffer = SerialSend($ZOGLAB,"AT*ReadSensor:0\\r\\n","",2); //Read out the Humidity
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
  $Temperature_Expect = StringParse($receiveBuffer,"Temperature = ","C");
  $Temperature_Expect = StringTrim($Temperature_Expect);
  $Humidity_Expect = StringParse($receiveBuffer,"Humidity = ","%");
  $Humidity_Expect = StringTrim($Humidity_Expect);
  UpdateStatus($Temperature_Expect);
  UpdateStatus($Humidity_Expect);
  $Temperature_L = ($Temperature_Expect*100) - 500;
  $Temperature_H = ($Temperature_Expect*100) + 500;
  $Humidity_L = ($Humidity_Expect*100) - 500;
  $Humidity_H = ($Humidity_Expect*100) + 500;
  //RecordMeasurement("Temp_Station",$Temperature_Expect,"C",true);
  //RecordMeasurement("Humid_Station",$Humidity_Expect,"%",true);
  
  $Ts = $Temperature_Expect;
  $Ts = Add($Ts,0);
  $Temp_L = $Ts - 5;
  $Temp_H = $Ts + 5;
  $Hs = $Humidity_Expect;
  $Hs = Add($Hs,0);
  return;
}

function Gb12_temp()
{
  $TestName="Temp_Morphues";
  $SendCmd="temp";
  $CmdTimeOut=100;
  $UpperLimit=$Temperature_H;
  $LowerLimit=$Temperature_L;
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=5;
  call GeneralTest_temp();
  $Tm = $Result_Value ;
  $Tm = Add($Tm ,0);
  $Tm = $Tm /100;
  
  return;
}

function humid_delta()
{
  $TestName="humid_TempAndHumid";
  SetTestName($TestName);
  $Limit_L = -5;
  $Limit_U = 5;
  //~ $Oh = 4.75;
  $Oh = 2.87;//2015-8-3
  $a = 17.625;
  $b = 243.04;
  $Count = 0;
  while($Count < 20)
    {
        call ZOGLAB_Measure();
	call Gb12_temp();
        call Gb11_humid();
	if($Tm<$Temp_L||$Tm>$Temp_H)
	{
	    goto temp_retry;
	 }
        $Ha = $Hm;// - (0.15 * (25 - $Tm));
	UpdateStatus("*************Ha************");
	UpdateStatus($Ha);
	UpdateStatus("***************************");
	
	$Td_a = $Hs/100;
	$Td_a = LogSpecifyBase($Td_a, 2.718281828);
	$Td_a = $Td_a + ($a * $Ts) / ($b + $Ts);
	$Td_a =  $b * $Td_a;
	UpdateStatus($Td_a);
	$Td_b = $Hs/100;
	$Td_b = LogSpecifyBase($Td_b, 2.718281828);
	$Td_b = $Td_b+(($a * $Ts) / ($b + $Ts));
	$Td_b =  $a - $Td_b;
	UpdateStatus($Td_a);
	$Td  = $Td_a / $Td_b;
	UpdateStatus("*************Td************");
	UpdateStatus($Td);
	UpdateStatus("***************************");
	
	$Hc_a = ($a * $Td) / ($b + $Td);
	$Hc_a = Power(2.718281828,$Hc_a);
	$Hc_a = 100 * $Hc_a;
	$Hc_b = ($a * $Tm) / ($b + $Tm);
	$Hc_b = Power(2.718281828,$Hc_b);
	$Hc =  $Hc_a / $Hc_b;
	UpdateStatus("*************Hc************");
	UpdateStatus($Hc);
	UpdateStatus("***************************");
	
	$delta = $Hc - ($Ha - $Oh);
	UpdateStatus("*************delta************");
	UpdateStatus($delta);
	UpdateStatus("***************************");
      
       if($delta>$Limit_L&&$delta<$Limit_U)
      {
	  break;
       }
       Label temp_retry:
    $Count = $Count + 1;
    SleepMilliseconds(500);
   }
  
  RecordMeasurement("Oh offset",$Oh,"Oh",true);
  RecordMeasurement("Temp_Station",$Temperature_Expect,"C",true);
  RecordMeasurement("Humid_Station",$Humidity_Expect,"%",true);
  RecordMeasurementWithLimits("Temp_Morphues ",$Tm,"C",true,$Temp_L,$Temp_H,true);
  RecordMeasurement("Humid_Morphues",$Hm,"%",true);
  RecordMeasurementWithLimits("Humidity_delta ",$delta,"%",true,$Limit_L,$Limit_U,true);
  return;
}

function Gb11_humid()
{
  $TestName="humid_Test";
  $SendCmd="humid";
  $CmdTimeOut=100;
  $UpperLimit=$Humidity_H;
  $UpperLimit = StringTrim($UpperLimit);
  $LowerLimit=$Humidity_L;
  $LowerLimit = StringTrim($LowerLimit);
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=40;
  call GeneralTest_humid();
  $Hm = $Result_Value ;
  $Hm = Add($Hm ,0);
  $Hm = $Hm /100;
 return;
}

function GeneralTest_humid()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
  $CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
    $Cont_Retry = $Cont_Retry + 1;
    $CmdRtn=$CmdRtn+$CmdRtn1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
    //$Pattern = "(-?)\\d{3,5}";
    UpdateStatus($Pattern);
    ($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
    SleepMilliseconds(100);  
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut);     
   }
  
return;
}

function Gb13_lightON()
{
  $TestName="light_Test";
  $SendCmd="light";
  $CmdTimeOut=100;
  $UpperLimit=70000;
  $LowerLimit=5000;
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=20;
  //~ call GeneralTest1();
  SleepMilliseconds(1000);//  don't remove this delay
  call GeneralTest_LED_ON();

  return;
}

function Gb13_lightOFF()
{
  $TestName="light_Test";
  $SendCmd="light";
  $CmdTimeOut=100;
  $UpperLimit=2000;
  $LowerLimit=0;
  $Pattern = "(-?)\\d{1,5}";
  $Max_Retry=20;
  //~ call GeneralTest1();
  call GeneralTest_LED_Off();

  return;
}

function Gb21_GestureCnt()
{
  $TestName="Gesture_count_Test";
  $SendCmd="gesture_count";
  $CmdTimeOut=100;
  $UpperLimit=1;
  $LowerLimit=0;
  $Pattern = "\\d{1}";
  $Max_Retry=1;
  call GeneralTest2();
  
  
 return;
}

//$TestName="light_Test";
//$SendCmd="dust"
//$TrimStr="temp is "
//$CmdTimeOut=3000
//$UpperLimit=
//$LowerLimit=
//$Pattern = "(-?)\\d{3,5}";
//$Max_Retry=5;
function GeneralTest1()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General_temp_Retry:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
//    $TempStr=$SendCmd + "\r\n";
//    $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    $CmdRtn=$CmdRtn+$CmdRtn1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	//$Pattern = "(-?)\\d{3,5}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
    SleepMilliseconds(100);  
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut);     
   }
	  //~ OperatorPrompt("Programming Completed","OK");
      UpdateStatus($LowerLimit);
      UpdateStatus($Result_Value);	
      UpdateStatus($UpperLimit);
   
				//~ if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				if(($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit))
				{	      
				  UpdateStatus("not in spec, retry");
				  
				  if($Cont_Retry < $Max_Retry)
				  {
				  //~ $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
				  SleepMilliseconds(1000);    
				  goto General_temp_Retry;
				  }
				
				}		
	
      
	//~ Label 
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}

function GeneralTest_temp()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General1_Retry:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
//    $TempStr=$SendCmd + "\r\n";
//    $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    $CmdRtn=$CmdRtn+$CmdRtn1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	//$Pattern = "(-?)\\d{3,5}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
    SleepMilliseconds(100);  
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut);     
   }
	  //~ OperatorPrompt("Programming Completed","OK");
      UpdateStatus($LowerLimit);
      UpdateStatus($Result_Value);	
      UpdateStatus($UpperLimit);
   
				//~ if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				if(($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit))
				{	      
				  UpdateStatus("not in spec, retry");
				  
				  if($Cont_Retry < $Max_Retry)
				  {
				  //~ $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
				  SleepMilliseconds(1000);    
				  goto General1_Retry;
				  }
				
				}		
	
	
		
	//~ Label 
	//RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}

function GeneralTest_LED_ON()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General_LED_ON_Retry:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
    $CmdRtn=$CmdRtn+$CmdRtn1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
      SleepMilliseconds(100);      
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut); 
   }
      UpdateStatus($LowerLimit);
      UpdateStatus($Result_Value);	
      UpdateStatus($UpperLimit);
				if(($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit))
				{	      
				  UpdateStatus("not in spec, retry");
				  
				  if($Cont_Retry < $Max_Retry)
				  {
				  //~ SerialSendMilliseconds($Launchpad_Handle, "led\r\n", "", 500);  // request from ben to ensure sample is off
				  SleepMilliseconds(200); 
				  goto General_LED_ON_Retry;
				  }
				
				}		
	
	
		
	//~ Label 
    if(!$FrameFound)
    {
	  $Result_Value=-1;
    }
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}

function GeneralTest_LED_Off()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General_LED_Off_Retry:

  $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
    $CmdRtn=$CmdRtn+$CmdRtn1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Pattern);
    ($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
    SleepMilliseconds(300);      
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut); 
   }
      UpdateStatus($LowerLimit);
      UpdateStatus($Result_Value);	
      UpdateStatus($UpperLimit);
				if(($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit))
				{	      
				  UpdateStatus("not in spec, retry");
				  
				  if($Cont_Retry < $Max_Retry)
				  {
				  SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 500);  // request from ben to ensure sample is off
				  SleepMilliseconds(300); 
				  goto General_LED_Off_Retry;
				  }
				
				}		
    if(!$FrameFound)
    {
	  $Result_Value=-1;
    }
		
	//~ Label 
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}


function GeneralTest2()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General1_Retry2:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
//	$TempStr=$SendCmd + "\r\n";
//    $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    $CmdRtn=$CmdRtn+$CmdRtn1;
	UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	//$Pattern = "(-?)\\d{3,5}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
      SleepMilliseconds(100);      
    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,"", "", $CmdTimeOut); 
   }
	  //~ OperatorPrompt("Programming Completed","OK");
      $Result_Value = StringParse($CmdRtn,"gesture_count","transitions");
	UpdateStatus($Result_Value);	
				if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				  UpdateStatus("not in spec, retry");
				  $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
				  goto General1_Retry2;
				}	
				
  RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}


function Gb14_Prox()
{
  UpdateStatus("****************************Prox test*********************************"); 
  $TestName="Prox_Test";
  SetTestName($TestName);
  $Max_Retry=10;
  $Cont_Retry = 0;
//  $Pattern = "Gesture:((.|\n|\r)*?)WAVE";
    $Pattern = "audio task";
  $FailClick = false;
  $AbortClick = false;
  $GestFound = false;
  while (($GestFound==false) && ($Cont_Retry < $Max_Retry))
  {
    $return= SerialSendMilliseconds($Userinterface_Handle, "#SK4$\r\n", "", 50); //waveon
   //~ SleepMilliseconds(500);
    $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 1800); 
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    ($GestFound,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
    SerialSendMilliseconds($Userinterface_Handle, "#RK4$\r\n", "", 50); //waveoff
  
   // $FailClick = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($GestureWin,"Failed"); 
   // $AbortClick = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($GestureWin,"Abort"); 
    SleepMilliseconds(500);
    $Cont_Retry = $Cont_Retry + 1;
  }  
 // CloseForm($GestureWin);

  if ($AbortClick==true)
  {
    Abort("User Abort!")
  }

  // GestFound will be update by the cRE_GeneralSingle
  RecordMeasurementPassFail("Prox test",$GestFound,"bool",true,$GestFound);
  
  return;
}

function dust_sensor()
{
// comparison between UUT and sample
  $TestName="dust_sensor";
  $SendCmd="dust 400";
  //~ $CmdTimeOut=3000;
  $CmdTimeOut=3000;
  //~ $UpperLimit=300;
  $UpperLimit=900;
  $LowerLimit=300;
  
//  call GeneralTest1(); 
$TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
   $Max_Retry=5;
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label dust_Retry:

  $CmdRtnA= SerialSendMilliseconds($Launchpad_Handle,$TempStr , "", $CmdTimeOut); 
    UpdateStatus("^^^^^^^^^UUT^^^^^^^^^^^");
    UpdateStatus($CmdRtnA);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    $UUT_dust = StringCut($CmdRtnA,"dust 400",8);   //dj
     $UUT_dust = StringTrim($UUT_dust);
      UpdateStatus("^^^^^^^^^UUT^^^^^^^^^^^");
    UpdateStatus($UUT_dust);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    $UUT_dust = StringTrim($UUT_dust);

  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
	if(($UUT_dust < 50 ) && ($Cont_Retry < $Max_Retry))
	{	      
	    UpdateStatus("UUT is less than 50, retry");
	    goto dust_Retry;
	}
   
  RecordMeasurementWithLimits($TestName,$UUT_dust,"",true,$LowerLimit,$UpperLimit,true); 
  return;
}
}


//$MicHandler=$Launchpad_Handle
function Gb20_OCTget()
{
  //$TestName="OCT Get";
  $UpperLimit=15500;
$LowerLimit=1000;
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  $Sound_return="";
  $Max_Retry=50;
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
goto SkippedPlay;  
  
Label EvalSound_Retry:
//    $return= SerialSendMilliseconds($Launchpad_Handle1, "p 60 48000  RINGTONE/tone.raw\r\n" , "", 100);  
//    UpdateStatus($return);
//    $Sound_return= SerialSendMilliseconds($Launchpad_Handle, "oct\r\n", "", 100); 
//    Sleep(10);
Label SkippedPlay:
  Sleep(1);
  $Sound_return= SerialSendMilliseconds($MicHandler, "getoct\r\n", "", 300); 
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Sound_return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  while($Cont_Retry < $Max_Retry)
  {
    $Cont_Retry = $Cont_Retry + 1;
    if ($Cont_Retry>1)
	{
	  $Sound_return= SerialSendMilliseconds($MicHandler, "", "", 100); 
	}
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Sound_return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	$Pattern = "(-?)\\d{3,5}((.|\n|\r)*?)";
	UpdateStatus($Sound_return);
	($FrameFound,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($Sound_return,$Pattern);

     UpdateStatus($FrameFound);
     if($FrameFound)
      {
	    UpdateStatus("Frame found!");
		break;
      }
     // SleepMilliseconds(100);      
	  // sample unit to stop sound
      //$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n", "", 100);  
    }
//    //$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n", "", 100);  
//	
	if($FrameFound)// frame found within the retry count
    {
		// frame shall be found until here.
		// extract string
		// 1. extract the patter1 with "symbol && 3-5 digit && symbol"
		// 2. extract thepattern2 3-5 digit value with -?
		
//		$InputStr=$MatchedStr;
//		UpdateStatus($MatchedStr);
//		$Pattern1="[^A-Z,a-z,0-9]\\d{3,5}[^A-Z,a-z,0-9]";
		$Pattern2="(-?)\\d{3,5}";
//		($Success1,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($InputStr,$Pattern1);
//		if ((!$Success1)&& ($Cont_Retry < $Max_Retry))
//		{
//			UpdateStatus("[^A-Z,a-z,0-9]\\d{3,5}[^A-Z,a-z,0-9], retry");
//			goto EvalSound_Retry;	
//		}
		// successful of getting 1st pattern
//		if ($Success1)
//		{
			UpdateStatus($MatchedStr);
			($Success,$ErrMsg,$Result_Value)=cRE_GeneralSingle($MatchedStr,$Pattern2);    
			if ((!$Success)&& ($Cont_Retry < $Max_Retry))
			{
				UpdateStatus("(-?)\\d{3,5} not found, retry");
				goto EvalSound_Retry;
			}	
			if ($Success)
			{
				UpdateStatus($Result_Value);	
				if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				UpdateStatus("not in spec, retry");
				goto EvalSound_Retry;
				}				
			}
//		}
    }
	if(!$FrameFound)// frame found within the retry count
    {
	  UpdateStatus("Frame not found");
	}	
	
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true); 
  
  return ;
}


function Gb18_genkey()
{
      UpdateStatus("****************************Gb18_genkey*********************************"); 
      $TestName="Gb18_genkey";
     
      SetTestName($TestName);
      $Result1 = false;
	      
	  $Max_Retry=120;
      $Cont_Retry = 0;
      $KeyLength=0;
	  $Keyreturn="";
  $KeyreturnA= SerialSendMilliseconds($Launchpad_Handle, "genkey\r\n", "", 100);  
 UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
      UpdateStatus($KeyreturnA);
      UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
     while($Cont_Retry < $Max_Retry)
     {
	  $Keyreturn = $Keyreturn + $KeyreturnA;// accum 
	  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
      UpdateStatus($Keyreturn);
      UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	 	 
	 $KeyLength = StringLength($Keyreturn);
	 
	   if ($KeyLength>=140)
       {
	     UpdateStatus("Key found!");
	     break;
       }	 
	 $Cont_Retry = $Cont_Retry + 1;
	 $KeyreturnA= SerialSendMilliseconds($Launchpad_Handle, "", "", 100); 

     }
          
	
    $Result = StringContains($Keyreturn,"factory key:");
    if (($KeyLength>=140) && ($Result==true))
       {
	     $Result1=true;
       }
	
	
      
      $SNPath="D:\\genkey\\"+$SerialNumber+".txt";
      RecordMeasurementPassFail($TestName,$Result,"String",true,$Result1);
      $FileWriteObject = FileWriteOpen($SNPath,"NEW");//D:
      FileWrite($FileWriteObject,$Keyreturn);
      FileWriteClose($FileWriteObject);
  /////////////////////////////////////////////////
  return ;
}

//$Ser_Return
//$ExpectedStr
function filterStr()
{
UpdateStatus("****************************filterStr*********************************"); 
    
$FilterCount=0;
Label RetryFil:
  UpdateStatus($Ser_Return);
  $ExpectedFound = StringContains($Ser_Return,$ExpectedStr);
  if ((!$ExpectedFound) && ($FilterCount <= 10))
  {
    $Ser_Return = SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);
	UpdateStatus("Retry...");
	$FilterCount=$FilterCount+1;
	goto RetryFil;
  } 
  UpdateStatus("****************************End filterStr*********************************"); 
    
return;
}

//$SerRtn
function filterSymbol()
{
UpdateStatus("****************************filterSymbol*********************************"); 
    
  $SerRtn = StringReplace($SerRtn,"R","");
  $SerRtn = StringReplace($SerRtn,"+","");
  $SerRtn = StringReplace($SerRtn,"~","");
return;
}
function FailConfig()
{
  ConfigurableHtmlReportWriter_ConfigureLocations($PassHtmlLocation1,$PassHtmlLocation1);
  End;
}	




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Cleanup()
{
    UpdateStatus("****************************GlobalCleanup*********************************"); 
  SerialSendMilliseconds($Userinterface_Handle, "#RK5$\r\n", "", 50);  //  
  SerialSendMilliseconds($Userinterface_Handle, "#RK6$\r\n", "", 50);  //  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK2$\r\n", "", 50); //indicator reset
	 $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50);  //sample switch on
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50); //uut switch on
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK3$\r\n", "", 50);  //unlock
 
	
	SerialClose($Launchpad_Handle);
SerialClose($Launchpad_Handle1);
  CloseForm($LoadWin);
    End ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function GlobalCleanup()
{
   UpdateStatus("****************************GlobalCleanup*********************************"); 
       
   
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50);  
    //~ $return= SerialSendMilliseconds($Userinterface_Handle, "#RK2$\r\n", "", 50);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK9$\r\n", "", 50);  
    SerialClose($Userinterface_Handle);
	   SerialClose($ZOGLAB);
	
	$Userinterface_Serial = 2;
    $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RKA$\r\n", "", 250); 
    //~ SerialSendMilliseconds($Userinterface_Handle, "#SK4$\r\n", "", 50);    
    SerialClose($Userinterface_Handle);
	
	 SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n", "", 50);
  SerialClose($IT6322_Handle);
    End ;
}

function Initialize()
{
   UpdateStatus("****************************GlobalCleanup*********************************"); 
    //~ $Userinterface_Serial = 1;
    //~ $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
    //~ $return= SerialSendMilliseconds($Userinterface_Handle, "#SK2$\r\n", "", 250);  
    //~ SerialClose($Userinterface_Handle);
	
  $Userinterface_Serial = 1;    
  $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RKA$\r\n", "", 50);  
  Sleep(2);
  //~ SerialSendMilliseconds($Userinterface_Handle, "#SK4$\r\n", "", 50); 
 // $return= SerialSendMilliseconds($Userinterface_Handle, "#SK9$\r\n", "", 50);  
//
 // $return= SerialSendMilliseconds($Userinterface_Handle, "#RK2$\r\n", "", 50);  // light off
  
  $ZOGLAB = SerialOpen(2,9600,8,"N",1);
  SleepMilliseconds(100);
  SerialHandshakingManualSet($ZOGLAB, "RTS","FALSE");

  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeInfo\\r\\n","",3);
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
  SleepMilliseconds(100);
  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeSysState\\r\\n","",3);
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
	
  $IT6322_Handle = SerialOpen("3",19200,8,"N",1);
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
  SerialSendMilliseconds($IT6322_Handle, "INST FIR\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT 24.0V\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "CURR 0.5A\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);   
  SerialSendMilliseconds($IT6322_Handle, "INST SECO\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT 12.0V\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "CURR 0.5A\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);    
  SerialSendMilliseconds($IT6322_Handle, "INST THI\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT 5.25V\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "CURR 2A\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 5V\n", "", 50);   
  SerialSendMilliseconds($IT6322_Handle,"OUTP 0\n", "", 50);
	
	
	
    End ;
}


function Gb08_Program_M4F()
{
   UpdateStatus("****************************Gb08_Program_M4F*********************************"); 
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// install ============================================================
  $TestName="Programming";
  SetTestName($TestName);
  
  SerialClose($Launchpad_Handle);
  // set to program pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //program pin
   //Reboot UUT
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
   SleepMilliseconds(100);
   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50); //uut switch off

  
 //== check if the log files has been existing 
 $LogFilePath="D:\\factory_release_update-only\\log.txt";
 $fileExists= CheckFileExists($LogFilePath,"RETURNONLY");
 if($fileExists)
{  
  FileDelete($LogFilePath);
}



 $MID = "D:\\factory_release_update-only\\";
 SystemCall($MID,"D:\\factory_release_update-only\\Flash_mid.bat","","TRUE","TRUE");
 //== check if the files has been created../
// $Count = 0;
//while($Count < 100)
//{ 
// $fileExists= CheckFileExists($LogFilePath,"RETURNONLY");
// if($fileExists)
//{
//  Sleep(3);  // don't change this delay
//  $inUse = CheckFileInUse($LogFilePath);  
//  if(!$inUse)
//  {
//    OperatorPrompt("Device connection issue "," OK ");
//    Sleep(3);
//    Abort("Programming Fail");
//  }
//  //== power on ==
//  //~ OperatorPrompt("File has created, power up uut ","OK");
//   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //uut switch on
//  //== ==========================
//  Sleep(1);
//  break;
//}
//$Count = $Count + 1;
//SleepMilliseconds(500);
//}

// wait for programming finish
 $Count = 0;
while($Count < 30)
{
 $inUse = CheckFileInUse("D:\\factory_release_update-only\\log.txt");  
//~ $FileContents = FileReadAllText("D:\\factory_release\\log.txt");
//~ $Result = StringContains($FileContents,"<End of command>");
if(!$inUse)
{
  //~ OperatorPrompt("Programming Completed","OK");
    // $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
  
  break;
}
$Count = $Count + 1;
SleepMilliseconds(1000);
}

  // Reset to program pin
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
  

//~ OperatorPrompt("SOP2 TO L","OK");
//SerialSendMilliseconds($Interface_Handle, "#RK1$\n","", 50);
//== Check result ====
$FileContents = FileReadAllText("D:\\factory_release_update-only\\log.txt");
UpdateStatus($FileContents);
//////////////////////////////////////////////////////////////////////////////////////////////
$String4="Progress (/sys/mcuimg1.bin): 100%";
$Result4 = StringContains($FileContents,$String4);
$Result=($Result4);
UpdateStatus($Result);
RecordMeasurementPassFail($TestName,"True","String",true,$Result);

  // set to normal pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //program pin
     $Launchpad_Handle = SerialOpen($UUT_Serial,115200,8,"N",1);   

    //Reboot UUT
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
   SleepMilliseconds(100);
   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50); //uut switch off
 //OperatorPrompt("visual check","OK");
   RecordMeasurementPassFail("Reboot done","True","true",true,true); 
 return ;
}
