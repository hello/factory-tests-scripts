////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//File Name:			9398_Hello_Morpheus Mid_Board Debug Rev1.1.jts
//Customer: 			Hello
//Project:   			9398_Hello_Morpheus DVT FVT tester
//Creator:   			 Yueh_Li
//Revision:			Debug
//Released:			2014/1/12
//Description:		The Script is used for 9398_Hello_Morpheus Mid Board DVT FVT_Debug Testing Process
//Revision History:		Revsion	Release date		Owner
//				Debug		2014/1/12	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////// Main Function ///////////////////////////////////////////////////


    //~ End;

SetFinalizeFunction("GlobalCleanup"); 
UpdateProgressBar(0);
call Gb01_BarcodeCheck();
UpdateProgressBar(5);
//~ call Gb02_Instrument_Init();
UpdateProgressBar(10);
//~ call Gb03_UUT_check();
UpdateProgressBar(15);
call Gb04_Lock_fixture();
UpdateProgressBar(20);
call Gb05_Power_ON();

UpdateProgressBar(25);
call Gb06_IT6322B_CURR_MES();
call Gb08_Peogram_M4Fa();
UpdateProgressBar(40);
call Gb07_Meansure_V();
UpdateProgressBar(50);
call Gb08_Peogram_M4Fb();
UpdateProgressBar(60);
call Gb09_Open_Mid_Handle();
UpdateProgressBar(65);
call Gb10_VER_Check();
call Gb13_Wifi_connect();
UpdateProgressBar(70);
call Gb11_dust_sensor();
UpdateProgressBar(80);
call Gb12_SD_Card_Read_Write();
UpdateProgressBar(90);
call Gb16_status();

//~ call Gb14_ping();
//~ call Gb15_time();

call Gb17_disconnect();
UpdateProgressBar(95);
call Gb16_DisconnectStatus();
call Gb18_RTC_test()
//call Gb19_time();
UpdateProgressBar(100);
End ;

//=================================================================================================================
//==============             Global function here
//=================================================================================================================

function Gb01_BarcodeCheck()
{
  UpdateStatus("**************************** Gb01_BarcodeCheck*********************************");  
    $TestName = "BarcodeCheck";
  SetTestName($TestName);
   $nTry=0;
  Label labBarcodeCheckLoop:
  $value = StringLength($SerialNumber);         //M0401144900062//905000040401145200331
  UpdateStatus($SerialNumber);
   while($SerialNumber == "")
  {
    if($nTry>3)
    {
      Abort("没有输入条码！ ");
    }
    $SerialNumber = OperatorInputPrompt("请输入UUT的条码");
    $nTry = $nTry + 1;
  }
  
  if ($value == 21)
  {
     $bit = StringStartsWith($SerialNumber,"9050000404","TRUE");
      if ($bit)
      {
	goto labBarcodeOver;
      }
  }
   if ($value == 14)
  {
     $bit = StringStartsWith($SerialNumber,"M","TRUE");
      if ($bit)
      {
	goto labBarcodeOver;
      }
  }
  $nTry = $nTry + 1;
  if($nTry<3)
  {
  goto labBarcodeCheckLoop;
  }
  goto labBarcodeError;
  Label labBarcodeOver:
  SetSerialNumberField($SerialNumber);
  UpdateStatus($SerialNumber);
  UpdateStatus("=============== Barcode Check PASS =============");
  UpdateStatus("============================================");
  RecordMeasurementPassFail("Barcode Check","True","String",true,$bit);
  return;
  
  Label labBarcodeError:
  $nTry = $nTry + 1;
  if ($nTry > 3)
  {
    UpdateStatus("=============== Barcode Check Fail =============");
    $Failed_Tests = "Barcode Check Fail";
    Fail("Error Serial Number!");
  }
  
  $SerialNumber = OperatorInputPrompt("Please Input the Serial number,\n Then Press OK continute");
  goto labBarcodeCheckLoop;
  return;
}
function Gb03_UUT_check()
{
    UpdateStatus("*********************Gb03_UUT_check***************************");
    //UUT Dect
     $TestName = "UUT_check";
  SetTestName($TestName);
  $UUTDectCount = 0;       
  $UUTWindowHandle = OperatorPromptNonBlocking("Please put UUT in fixture!",150,300);
  Label UUTSensorReCheck:
  $UUTDectCount = $UUTDectCount +1;
  if($UUTDectCount > 1000)
  {
    
    CloseForm($UUTWindowHandle);
    Sleep(1);
    $UUTNotCloseWindow = OperatorPromptNonBlocking("Not found UUT in time!",150,300);
    Sleep(5);
    CloseForm($UUTNotCloseWindow);
    Abort($UUTNotCloseWindow);
  }  
  $UUTSenStatus = SerialSendMilliseconds($Interface_Handle, "#IN2$\n", "", 200);  	// Read UUT Sensor
  UpdateStatus($UUTSenStatus);
  //~ OperatorPrompt("DCH ","OK");
   $bit = StringStartsWith($UUTSenStatus,"1","TRUE");
    UpdateStatus($bit);
  if(!$bit)
  {
    SleepMilliseconds(200);
    goto UUTSensorReCheck;
  } 
  SleepMilliseconds(100);
  CloseForm($UUTWindowHandle);           
  RecordMeasurementPassFail("UUT_check","True","String",true,$bit);  
return ;
}
function Gb04_Lock_fixture()
{
  UpdateStatus("****************************Gb04_Lock_fixture*********************************");  
     $TestName = "Lock_fixture";
  SetTestName($TestName);
   $CoverDectCount = 0;       
  $CoverWindowHandle = OperatorPromptNonBlocking("Please close the Fixture!",150,300);
  Label CoverSensorReCheck:
  $CoverDectCount = $CoverDectCount +1;
  if($CoverDectCount > 1000)
  {
    CloseForm($CoverWindowHandle);
    Sleep(1);
    $CoverNotCloseWindow = OperatorPromptNonBlocking("Fixture not Close in time!",150,300);
    Sleep(1);
    CloseForm($CoverNotCloseWindow);
    Abort($CoverNotCloseWindow);

  }  
  $CoverSenStatus = SerialSendMilliseconds($Interface_Handle, "#IN5$", "",200);	// Read Cover Sensor
  UpdateStatus($CoverSenStatus);
     $bit = StringStartsWith($CoverSenStatus,"1","TRUE");
    UpdateStatus($bit);
  if(!$bit)
  {
    SleepMilliseconds(100);
    goto CoverSensorReCheck;
  } 
  //~ SleepMilliseconds(200);
  CloseForm($CoverWindowHandle);
  ////////////////////////////////////////////////////////////////////////////////////////
  RecordMeasurementPassFail("Lock_fixture","True","String",true,$bit); 
return ;
}
function Gb02_Instrument_Init()
{
  UpdateStatus("**************************** Instrument_Init*********************************");  
      $TestName = "Instrument_Init";
  SetTestName($TestName);
  $Interface_Serial = 4;                                                                     //Set Serial port which control Power Unit Box
  $RelayBoard_Serial = 5; 
  $IT6322_Port = 3;   //The serial Port comminucate with IT6322B
  $AG34410_address = "USB0::0x0957::0x0607::MY53009665::0::INSTR"; //The GPIB address with USB0::0x0957::0x0607::MY53009665::0::INSTR
  //~ // create instance to all instrument
  $Interface_Handle = SerialOpen($Interface_Serial,19200,8,"N",1);   
  $RelayBoard_Handle = SerialOpen($RelayBoard_Serial,19200,8,"N",1); 
  $IT6322_Handle = SerialOpen($IT6322_Port ,19200,8,"N",1);
  $AG34410_Handle = NIVISA_Open($AG34410_address); // 
  SerialSendMilliseconds($Interface_Handle, "#RKA$\n", "", 50);
  
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
  SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
  SerialSendMilliseconds($IT6322_Handle, "INST FIR\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT 5.0V\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "CURR 0.1A\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);   
  SerialSendMilliseconds($IT6322_Handle, "INST SECO\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT 3.3V\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "CURR 0.5A\n", "", 50);  
  SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);    
  //~ SerialSendMilliseconds($IT6322_Handle, "INST THI\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT 1.8V\n", "", 50);
  //~ SerialSendMilliseconds($IT6322_Handle, "CURR 0.1A\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 5V\n", "", 50);   
  RecordMeasurementPassFail("Instrument_Init","True","String",true,"true"); 
  return;
}
function Gb05_Power_ON()
 {
   UpdateStatus("****************************Gb05_Power_ON*********************************");  
   SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
   SerialSendMilliseconds($IT6322_Handle, "OUTP 1\n");
  //~ SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
  //~ SerialSendMilliseconds($IT6322_Handle, "INST FIR\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT 5.0V\n", "", 50);
  //~ SerialSendMilliseconds($IT6322_Handle, "CURR 0.1A\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);   
  //~ SerialSendMilliseconds($IT6322_Handle, "INST SECO\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT 3.3V\n", "", 50);
  //~ SerialSendMilliseconds($IT6322_Handle, "CURR 0.5A\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 10V\n", "", 50);    
  //~ SerialSendMilliseconds($IT6322_Handle, "INST THI\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT 1.8V\n", "", 50);
  //~ SerialSendMilliseconds($IT6322_Handle, "CURR 0.1A\n", "", 50);  
  //~ SerialSendMilliseconds($IT6322_Handle, "VOLT:PROT 5V\n", "", 50);   
  //~ SerialSendMilliseconds($IT6322_Handle,"OUTP 1\n", "", 50);
   SleepMilliseconds(1000);
    //~ OperatorPrompt("Lock fixture","OK");
     RecordMeasurementPassFail("Power_ON","True","String",true,"true"); 
   return ;
 }
 function AG34410_Set_DC_Volt()
{
  UpdateStatus("**************************** AG34410_Set_DC_Volt*********************************");  
  NIVISA_Write($AG34410_Handle, "CONF:VOLT:DC 10,0.001\n");
  SleepMilliseconds(20);
  return;
}

function AG34410_Read_DC_Volt()
{
  UpdateStatus("**************************** AG34410_Read_DC_Volt*********************************");  
  SleepMilliseconds(30);
  SleepMilliseconds(30);
  $AgRange = 5;
  $AgResolution = 0.01;
  $instrCmd = "MEAS:VOLT:DC?";
  $instrCmd = StringCat($instrCmd, " ");
  $instrCmd = StringCat($instrCmd, $AgRange);
  $instrCmd = StringCat($instrCmd, ",");
  $instrCmd = StringCat($instrCmd, $AgResolution);
  UpdateStatus($instrCmd);
  NIVISA_Write($AG34410_Handle,$instrCmd);
  $Volt_Result = NIVISA_Read($AG34410_Handle);  
  $Volt_Result =Round($Volt_Result,3);
 UpdateStatus($Volt_Result);
  return;
}

function Gb07_Meansure_V()
{
   UpdateStatus("**************************** AG34410_Read_DC_Volt*********************************"); 
   $TestName="Meansure_Volt";
  
  SetTestName($TestName);
  $TestName="Measure_P4_4_Volt";
  SerialSendMilliseconds($RelayBoard_Handle, "#SAK5$\n", "", 50);       
  call AG34410_Set_DC_Volt();
  call AG34410_Read_DC_Volt();
   SerialSendMilliseconds($RelayBoard_Handle, "#RAK5$\n", "", 50); 
 RecordMeasurementWithLimits($TestName,$Volt_Result,"V",true,4.9,5.1,true);  
/////////////////////////////////////////////////////////////////////////////////////////  
  $TestName="Measure_TP8_Volt";
  SerialSendMilliseconds($RelayBoard_Handle, "#SAK6$\n", "", 50);       
  //call AG34410_Set_DC_Volt();
  call AG34410_Read_DC_Volt();
   SerialSendMilliseconds($RelayBoard_Handle, "#RAK6$\n", "", 50);  
   RecordMeasurementWithLimits($TestName,$Volt_Result,"V",true,3.2,3.4,true);
  /////////////////////////////////////////////////////////////////////////////
  $TestName="Measure_P2_4_Volt";
  SerialSendMilliseconds($RelayBoard_Handle, "#SAK7$\n", "", 50);       
  //call AG34410_Set_DC_Volt();
  call AG34410_Read_DC_Volt();
   SerialSendMilliseconds($RelayBoard_Handle, "#RAK7$\n", "", 50);  
   RecordMeasurementWithLimits($TestName,$Volt_Result,"V",true,1.8,1.9,true);
  /////////////////////////////////////////////////////////////////////////////
  return ;
}

function Gb06_IT6322B_CURR_MES()
{ 
  UpdateStatus("****************************Gb06_IT6322B_CURR_MES*********************************"); 
  $TestName = "Measure Current";
  SetTestName($TestName);
  $CH1_return =0;
  $CH2_return =0;
  $CH3_return =0;
    //~ OperatorPrompt("OK","OK");
  //~ $Test_Current ="5V_Current";
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);                        //IT6322B Initialize
  SerialSendMilliseconds($IT6322_Handle, "INST FIR\n", "", 50);  
  //$Mes_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR:ALL?\n", "", 50); 
  //~ $CH1_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 50); 
  //~ UpdateStatus($CH1_return);
  //OperatorPrompt("OK","OK");
  //~ RecordMeasurementWithLimits($Test_Current,$CH1_return,"A",true,0.01,0.7,true);
  $Test_Current ="Meansure_3.3V_Current";
  $count=0;
  while($count<5)
  {
  SerialSendMilliseconds($IT6322_Handle, "INST SECO\n", "", 50);  
  $CH2_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 100); 
  UpdateStatus($CH2_return);
  $CH2_return=$CH2_return*1000;
   UpdateStatus($CH2_return);
  if($CH2_return<50)
  {
    break;
  }
  $count = $count+1;
}
  RecordMeasurementWithLimits($Test_Current,$CH2_return,"mA",true,20,50,true);
//~ /*$Test_Current ="1.8V_Current";
 //~ SerialSendMilliseconds($IT6322_Handle, "INST THI\n", "", 50);  
  //~ $CH3_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 50); 
  //~ UpdateStatus($CH3_return);
  //~ RecordMeasurementWithLimits($Test_Current,$CH3_return,"A",true,0.01,0.7,true);*/
  return;
}
function Gb08_Peogram_M4F()
{
   UpdateStatus("****************************Gb08_Peogram_M4F*********************************"); 
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// install ============================================================
  $TestName="Programming";
  SetTestName($TestName);
 SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
 SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
 SerialSendMilliseconds($Interface_Handle, "#SK1$\n","", 50);
 //== check if the log files has been existing 
 $fileExists= CheckFileExists("D:\\factory_release\\log.txt","RETURNONLY");
 if($fileExists)
{
  FileDelete($fileExists);
}
 $MID = "D:\\factory_release\\";
 SystemCall($MID,"D:\\factory_release\\Flash_mid.bat","","FALSE","TRUE");
 //== check if the files has been created../
 $Count = 0;
while($Count < 10)
{ 
 $fileExists= CheckFileExists("D:\\factory_release\\log.txt","RETURNONLY");
 if($fileExists)
{
  Sleep(3);  // don't change this delay
  $inUse = CheckFileInUse("D:\\factory_release\\log.txt");  
  if(!$inUse)
  {
    OperatorPrompt("Device connection issue "," OK ");
    Sleep(3);
    Abort("Programming Fail");
  }
  //== power on ==
  //~ OperatorPrompt("File has created, power up uut ","OK");
  SerialSendMilliseconds($IT6322_Handle,"OUTP 1\n", "", 50);
  //== ==========================
  Sleep(1);
  break;
}
$Count = $Count + 1;
SleepMilliseconds(500);
}
 //~ // wait for restart 
 //~ $Count = 0;
//~ while($Count < 10)
//~ {
//~ $FileContents = FileReadAllText("D:\\factory_release\\log.txt");
//~ $Result = StringContains($FileContents,"INFO: --- please restart the device ---");
//~ if($Result)
//~ {
  //~ OperatorPrompt("please restart the device","OK");
  //~ break;
//~ }
//~ $Count = $Count + 1;
//~ SleepMilliseconds(1000);
//~ }
// wait for programming finish
 $Count = 0;
while($Count < 30)
{
 $inUse = CheckFileInUse("D:\\factory_release\\log.txt");  
//~ $FileContents = FileReadAllText("D:\\factory_release\\log.txt");
//~ $Result = StringContains($FileContents,"<End of command>");
if(!$inUse)
{
  //~ OperatorPrompt("Programming Completed","OK");
  SerialSendMilliseconds($IT6322_Handle,"OUTP 0\n", "", 50);
  break;
}
$Count = $Count + 1;
SleepMilliseconds(1000);
}
//~ OperatorPrompt("SOP2 TO L","OK");
SerialSendMilliseconds($Interface_Handle, "#RK1$\n","", 50);
//== Check result ====
$FileContents = FileReadAllText("D:\\factory_release\\log.txt");
UpdateStatus($FileContents);
//////////////////////////////////////////////////////////////////////////////////////////////
$String1="Progress (SRAM): 100%";
$String2="Progress (/sys/servicepack.ucf): 100%";//
$String3="Progress (/sys/mcuimg1.bin): 100%";
$String4="Progress (/sys/mcuimg.bin): 100%";
$String5="Progress (/cert/ca.der): 100%";
$String6="Progress (/hello/hw_ver): 100%";
$String7="Progress (/top/factory.bin): 100%";//
$String8="> Finish Executing operation: program";

$Result1 = StringContains($FileContents,$String1);
UpdateStatus($Result1);
$Result2 = StringContains($FileContents,$String2);
UpdateStatus($Result2);
$Result3 = StringContains($FileContents,$String3);
UpdateStatus($Result3);
$Result4 = StringContains($FileContents,$String4);
UpdateStatus($Result4);
$Result5 = StringContains($FileContents,$String5);
UpdateStatus($Result5);
$Result6 = StringContains($FileContents,$String6);
UpdateStatus($Result6);
$Result7 = StringContains($FileContents,$String7);
UpdateStatus($Result7);
$Result8 = StringContains($FileContents,$String7);
UpdateStatus($Result8);
$Result9 = StringContains($FileContents,"<End of command>");
UpdateStatus($Result9);
$Result=($Result1&&$Result2&$Result3&&$Result4&&$Result5&&$Result6&&$Result7&&$Result8&&$Result9);
UpdateStatus($Result);
RecordMeasurementPassFail($TestName,"True","String",true,$Result);

 // Power cycle 
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50)
   SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
  Sleep(1);
  SerialSendMilliseconds($IT6322_Handle,"OUTP 1\n", "", 50)
  //~ Sleep(3);    
  //SleepMilliseconds(1000);
   RecordMeasurementPassFail("Reboot done","True","true",true,true); 
 return ;
}

function Gb08_Peogram_M4Fa()
{
   UpdateStatus("****************************Gb08_Peogram_M4F*********************************"); 
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// install ============================================================
  $TestName="Programming";
  SetTestName($TestName);
 SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
 SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
 SerialSendMilliseconds($Interface_Handle, "#SK1$\n","", 50);
 //== check if the log files has been existing 
 $fileExists= CheckFileExists("D:\\factory_release\\log.txt","RETURNONLY");
 if($fileExists)
{
  FileDelete($fileExists);
}
 $MID = "D:\\factory_release\\";
 SystemCall($MID,"D:\\factory_release\\Flash_mid.bat","","FALSE","TRUE");
 //== check if the files has been created../
 $Count = 0;
while($Count < 10)
{ 
 $fileExists= CheckFileExists("D:\\factory_release\\log.txt","RETURNONLY");
 if($fileExists)
{
  Sleep(3);  // don't change this delay
  $inUse = CheckFileInUse("D:\\factory_release\\log.txt");  
  if(!$inUse)
  {
    OperatorPrompt("Device connection issue "," OK ");
    Sleep(3);
    Abort("Programming Fail");
  }
  //== power on ==
  //~ OperatorPrompt("File has created, power up uut ","OK");
  SerialSendMilliseconds($IT6322_Handle,"OUTP 1\n", "", 50);
  //== ==========================
  SleepMilliseconds(500);
  break;
}
$Count = $Count + 1;
SleepMilliseconds(500);
}

   RecordMeasurementPassFail("Programming","True","true",true,true); 
 return ;
}
function Gb08_Peogram_M4Fb()
{
   UpdateStatus("****************************Gb08_Peogram_M4F*********************************"); 
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// install ============================================================
  $TestName="Programming";
  SetTestName($TestName);



// wait for programming finish
 $Count = 0;
while($Count < 30)
{
 $inUse = CheckFileInUse("D:\\factory_release\\log.txt");  
//~ $FileContents = FileReadAllText("D:\\factory_release\\log.txt");
//~ $Result = StringContains($FileContents,"<End of command>");
if(!$inUse)
{
  //~ OperatorPrompt("Programming Completed","OK");
  SerialSendMilliseconds($IT6322_Handle,"OUTP 0\n", "", 50);
  break;
}
$Count = $Count + 1;
SleepMilliseconds(1000);
}
//~ OperatorPrompt("SOP2 TO L","OK");
SerialSendMilliseconds($Interface_Handle, "#RK1$\n","", 50);
//== Check result ====
$FileContents = FileReadAllText("D:\\factory_release\\log.txt");
UpdateStatus($FileContents);
//////////////////////////////////////////////////////////////////////////////////////////////
$String1="Progress (SRAM): 100%";
$String2="Progress (/sys/servicepack.ucf): 100%";//
$String3="Progress (/sys/mcuimg1.bin): 100%";
$String4="Progress (/sys/mcuimg.bin): 100%";
$String5="Progress (/cert/ca.der): 100%";
$String6="Progress (/hello/hw_ver): 100%";
$String7="Progress (/top/factory.bin): 100%";//
$String8="> Finish Executing operation: program";

$Result1 = StringContains($FileContents,$String1);
UpdateStatus($Result1);
$Result2 = StringContains($FileContents,$String2);
UpdateStatus($Result2);
$Result3 = StringContains($FileContents,$String3);
UpdateStatus($Result3);
$Result4 = StringContains($FileContents,$String4);
UpdateStatus($Result4);
$Result5 = StringContains($FileContents,$String5);
UpdateStatus($Result5);
$Result6 = StringContains($FileContents,$String6);
UpdateStatus($Result6);
$Result7 = StringContains($FileContents,$String7);
UpdateStatus($Result7);
$Result8 = StringContains($FileContents,$String7);
UpdateStatus($Result8);
$Result9 = StringContains($FileContents,"<End of command>");
UpdateStatus($Result9);
$Result=($Result1&&$Result2&$Result3&&$Result4&&$Result5&&$Result6&&$Result7&&$Result8&&$Result9);
UpdateStatus($Result);
RecordMeasurementPassFail($TestName,"True","String",true,$Result);

 // Power cycle 
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50)
   SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
  Sleep(1);
  SerialSendMilliseconds($IT6322_Handle,"OUTP 1\n", "", 50)
  //~ Sleep(3);    
  //SleepMilliseconds(1000);
   RecordMeasurementPassFail("Reboot done","True","true",true,true); 
 return ;
}

function Gb09_Open_Mid_Handle()
{
  $Mid_board_Handle = SerialOpen("13",115200,8,"N",1);
  $cont =0;
  while( $cont < 30)
  {
  $free_return = SerialSendMilliseconds($Mid_board_Handle, "", "", 100);  
  UpdateStatus($free_return);
$return= StringContains($free_return,"FreeRTOS");
  if($return)
  {
    break;
  }
  $cont = $cont +1;
  SleepMilliseconds(100);
 }
  RecordMeasurementPassFail("FreeRTOS found","True","true",true,true); 

  return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb10_VER_Check()
{
  $Result = false;
  $TestName = "Check FW version";
  SetTestName($TestName);
  $cont =0;
  while( $cont < 10)
  {
  $VER_return = SerialSendMilliseconds($Mid_board_Handle, "ver\r\n", "", 100);  
  UpdateStatus($VER_return);
  $VER_length = StringLength($VER_return);
  if($VER_length > 8)
  {
    break;
  }
   SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
   SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n");
   Sleep(3);
    SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);       //IT6322B Initialize
   SerialSendMilliseconds($IT6322_Handle, "OUTP 1\n");
    Sleep(2);
  $cont = $cont +1;
 }
  $VER_Num = StringCut($VER_return,"ver: ",8);
  UpdateStatus($VER_Num);
  $Exp_VER ="23d5d2ad";
  $Result = StringComparison($VER_Num,$Exp_VER,"==");
  RecordMeasurementPassFail($TestName,$VER_Num,"Sting",true,$Result);
 
   $log_return = SerialSendMilliseconds($Mid_board_Handle, "loglevel 40\r\n", "", 1000);  
    UpdateStatus($log_return);
  $boot_return = SerialSendMilliseconds($Mid_board_Handle, "boot\r\n", "", 1000); 
  UpdateStatus($boot_return);  
  return;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb11_dust_sensor()
{
  UpdateStatus("****************************dust_sensor*********************************"); 
 $TestName="dust_sensor";
  SetTestName($TestName);
  $Result10=false;
  $count=0;
  //~ $Mid_board_Handle = SerialOpen("13",115200,8,"N",1);
  while(!$Result10&&$count<5)
  {
  $count=$count+1;
  $dust= SerialSendMilliseconds($Mid_board_Handle, "dust\r\n", "", 500);  
  UpdateStatus($dust);
    $dust = StringReplace($dust,"dust\r\n","");
   //$dust = StringReplace($dust,"\n","");
  //  $dust = StringReplace($dust,"\r","");
    UpdateStatus($dust);
  $Result10 = StringContains($dust,"dust");
 UpdateStatus($Result10);
    if($Result10)
    {
      break ;
    }
  Sleep(1);
  }
  //~ $length = StringLength($dust);
  //~ UpdateStatus($length);
  //~ $length=$length-32;
   //~ UpdateStatus($length);
   //~ $Dust_vlu = StringSub($dust,$length,3) //R183  StringSub
  //~ UpdateStatus($Dust_vlu);
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  RecordMeasurementWithLimits($TestName,$dust,"",true,100,355,true);  
  return ;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb12_SD_Card_Read_Write()
{
  SetTestName("SD Test")
  UpdateStatus("****************************SD_Card_Read_Write*********************************"); 
   $return= SerialSendMilliseconds($Mid_board_Handle, "ls\r\n", "bytes free", 1000);  
   UpdateStatus($return);
  $Result1 = StringContains($return,"");
  UpdateStatus($Result1);
  $Result2 = StringContains($return,"3 File(s),");
  $Result3 = StringContains($return,"6 Dir(s),");
  $Result=($Result1&&$Result2&&$Result3);
UpdateStatus($Result);
  RecordMeasurementPassFail("SD Card Detection","True","bool",true,$Result1);	//TP-LINK_A1A2AC
  return;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb13_Wifi_connect()
{
 UpdateStatus("****************************Wifi_connect*********************************"); 
 $TestName = "Wifi_connect";
 SetTestName($TestName);
 $return= SerialSendMilliseconds($Mid_board_Handle, "antsel 0\r\n", "", 100);  
 UpdateStatus($return);
 $rssi= SerialSendMilliseconds($Mid_board_Handle, "rssi\r\n", "", 2000);  
 $rssi = StringCut($rssi,"TP-LINK_A1A2AC ",4);
 UpdateStatus($rssi);
 $rssi = StringTrim($rssi);
 UpdateStatus($rssi);
 RecordMeasurementWithLimits("WIFI RSSI",$rssi,"dBm",true,-50,-20,true);
  //~ $String11="TP-LINK_A1A2AC";
  //~ $Result1 = StringContains($rssi,$String11);
  //~ RecordMeasurementPassFail($TestName,"TP-LINK_A1A2AC","String",true,$Result1);	//TP-LINK_A1A2AC
  $count=0;
  Label connect_wifi:
$connect= SerialSendMilliseconds($Mid_board_Handle, "connect TP-LINK_A1A2AC key 0\r\n", "", 1000);  //connect TP-LINK_A1A2AC key 0<CR><LF>
UpdateStatus($connect);
//~ $Result1 = StringContains($connect,"SL_WLAN_CONNECT_EVENT");
//~ $Result2 = StringContains($connect,"SL_NETAPP_IPV4_ACQUIRED");
//~ $Result = ($Result1&&$Result2);
//~ if(!$Result&&$count<3)
//~ {
   //~ $count=$count+1;
  //~ goto connect_wifi;
//~ }
//~ RecordMeasurementPassFail("WIFI Connection",$Result,"Bool",true,$Result);	//TP-LINK_A1A2AC
//Wifi current test
$Test_Current="Wifi_connected_Current";
$MEAS_curr=0;
while($MEAS_curr<2)
{
SerialSendMilliseconds($IT6322_Handle, "INST SECO\n", "", 50);  
  $CH2_return = SerialSendMilliseconds($IT6322_Handle,"MEAS:CURR?\n", "", 500); 
  UpdateStatus($CH2_return);
  $CH2_return=$CH2_return*1000;
   UpdateStatus($CH2_return);
   if($CH2_return<100)
{
  break ;
}
$MEAS_curr=$MEAS_curr+1;
}
  RecordMeasurementWithLimits($Test_Current,$CH2_return,"mA",true,20,100,true);
  return ;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb14_ping()
{
  UpdateStatus("****************************Gb_ping*********************************"); 
  SetTestName("ping")
   $return= SerialSendMilliseconds($Mid_board_Handle, "ping 192.168.1.1\r\n", "", 2000);  
   UpdateStatus($return);
 $Result = StringContains($return,"Ping tx:1 rx:1");
  RecordMeasurementPassFail("ping",$Result,"bool",true,$Result);
  return ;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb15_time()
{
UpdateStatus("****************************time*********************************"); 
$TestName = "time";
SetTestName($TestName);
  $count=0;
  Label time:
   $count= $count+1;
   $return= SerialSendMilliseconds($Mid_board_Handle, "time\r\n", "", 10000);  
   UpdateStatus($return);
 $Result1 = StringContains($return,"time is 4294967295 and the ntp is -1 and the diff is 0");
 $Result2 = StringContains($return,"");
  
$Result = ($Result1&&$Result2);
  if(!$Result&&$count<3)
  {
    goto time;
  }
  RecordMeasurementPassFail("time",$Result,"bool",true,$Result);
  return ;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb16_status()
{
  UpdateStatus("****************************Gb_status*********************************"); 
  SetTestName("status")
   $return= SerialSendMilliseconds($Mid_board_Handle, "status\r\n", "", 100);  
   UpdateStatus($return);
 $Result = StringContains($return,"IP=192.168.1.");
  RecordMeasurementPassFail("status",$Result,"bool",true,$Result);
  return ;
}

function Gb16_DisconnectStatus()
{
  UpdateStatus("****************************Gb_status*********************************"); 
  SetTestName("status")
   $return= SerialSendMilliseconds($Mid_board_Handle, "status\r\n", "", 100);  
   UpdateStatus($return);
 $Result = StringContains($return,"IP=0.0.0.0");
  RecordMeasurementPassFail("status",$Result,"bool",true,$Result);
  return ;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb17_disconnect()
{
  UpdateStatus("****************************Gb_disconnect*********************************"); 
  SetTestName("disconnect")
   $return= SerialSendMilliseconds($Mid_board_Handle, "disconnect\r\n", "", 100);  
   UpdateStatus($return);
 $Result = StringContains($return,"");
  RecordMeasurementPassFail("disconnect",$Result,"bool",true,$Result);
// pings function here ==

 //~ $return= SerialSendMilliseconds($Mid_board_Handle, "ping 192.168.1.1 \r\n", "", 3000);  
//~ UpdateStatus($return);
  //~ RecordMeasurementPassFail($TestName,"The network has been connected","String",true,$MSG);
  return ;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb18_RTC_test()
{
  SetTestName("RTC_Test")
  UpdateStatus("****************************RTC_Test*********************************"); 
   $return= SerialSendMilliseconds($Mid_board_Handle, "lfclktest\r\n", "", 3500);  
   UpdateStatus($return);
 $Result = StringContains($return,"time is 3");

  RecordMeasurementPassFail("RTC_test 2s",$Result,"bool",true,$Result);
   //~ $return= SerialSendMilliseconds($Mid_board_Handle, "lfclktest 2000\r\n", "", 3000);  
   //~ UpdateStatus($return);
 //~ $Result = StringContains($return,"time is 2");

  //~ RecordMeasurementPassFail("RTC_test",$Result,"bool",true,$Result);
  return ;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Gb19_time()
{
UpdateStatus("****************************time*********************************"); 
$TestName = "time";
SetTestName($TestName);
  $count=0;
  Label time1:
   $count= $count+1;
   $return= SerialSendMilliseconds($Mid_board_Handle, "time\r\n", "", 2000);  
   UpdateStatus($return);
 $Result1 = StringContains($return,"time is 4294967295 and the ntp is -1 and the diff is 0");
 $Result2 = StringContains($return,"");
  
$Result = ($Result1&&$Result2);
  if(!$Result&&$count<3)
  {
    goto time1;
  }
  RecordMeasurementPassFail("time",$Result,"bool",true,$Result);
  return ;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function GlobalCleanup()
{
UpdateStatus("****************************GlobalCleanup*********************************"); 
  SerialSendMilliseconds($RelayBoard_Handle, "#REST$\n", "", 50);//#REST$
  //~ SerialClose($RelayBoard_Handle);
  //~ NIVISA_Close($AG34410_Handle); 
  SerialClose($Mid_board_Handle);
  SerialSendMilliseconds($IT6322_Handle, "SYST:REM\n", "", 50);
  SerialSendMilliseconds($IT6322_Handle, "OUTP 0\n", "", 50);
  //~ SerialClose($IT6322_Handle);
  SerialSendMilliseconds($Interface_Handle, "#RK1$\n","OK" , 50);
  SerialSendMilliseconds($Interface_Handle, "#RK5$\n", "OK", 50);
  SerialSendMilliseconds($Interface_Handle, "#RK2$\n", "OK", 50);
   //~ SerialClose($Interface_Handle);
  End ;
}


















