//****************************************************************************************//
//****************************************************************************************//
//***                    Jabil GTS HuangPu Script File                                 ***//
//***  Product name						: Hello_Morpheus_DVT_Product                   ***//
//***  Script Revision					: V1.0                                         ***//
//***  Script Revision Date				: 31 Jan 2015                                  ***//
//***  Jabil Test Revision				: 7.19.01						  			   ***//
//***  3rd Party Test Program(Version)	: NA										   ***//  
//***  Custom J.Test Library(Version)	: NA						     			   ***//
//***  Description						: This Script is developed for Hello Morpheus  ***//
//***									  Assembly FVT1 Test Station.      			   ***//
//***  Created by						: Yueh_Li                                      ***//
//***  Modify by						: BK Ong/ Chris                                ***//
//**************************************************************************************//
//**************************************************************************************//

//****************************************************************************************//
//****************************************************************************************//
//***                                      Release History                             ***//
//***  ReV1.0    Formal Released                     29 Jan 15      BK / Chris         ***//
//***  ReV1.1    Changed ringtone argument,          31 Jan 15      Chris              ***//
//***            fix timing issue, changed OCTget Low limit                            ***//
//***  Rev1.2    Changed Light off                    2 Feb 15      BK                 ***//1500
// ***** Rev    Changed Oct get lower threshold to 1000 Ben
//***            $Pattern = "(-?)\\d{1,5}";                                            ***//
//***  Rev1.4    fixed the genkey by eliminate continue send cmd 2 Feb 15      BK                 ***//
//****************************************************************************************//
//****************************************************************************************//

//********************************Main Function******************************************//

SetFinalizeFunction("Cleanup"); 
call Gb_BarcodeCheck();
call Gb_Instrument_Init();
call BootCheck();// fast boot check with log level 40
call Gb02_rssi();

call Gb15_dust_sensor();

//sample play
$return= SerialSendMilliseconds($Launchpad_Handle, "p 57 48000  RINGTONE/tone.raw\r\n" , "", 100);  

call Gb10_VER_Check();

$MicHandler=CopyVariable($Launchpad_Handle1);
call Gb00_OCT();

call Gb10_SD_Card_Read_Write();


call Gb03_connect();

//call Gb08_LED_1stOFF();
call Gb13_lightOFF();
//SleepMilliseconds(3500);// wait for LED to off, 1.5 second modified by bk
call Gb08_LED_ON();
call Gb13_lightON();
call Gb08_LED_OFF();
SleepMilliseconds(1000);
call Gb13_lightOFF();

call Gb20_OCTget();
$return= SerialSendMilliseconds($Launchpad_Handle, "s\r\n" , "", 100);  
//uut play
$return= SerialSendMilliseconds($Launchpad_Handle1, "p 57 48000  RINGTONE/tone.raw\r\n" , "", 100);  
 
$MicHandler=CopyVariable($Launchpad_Handle);
call Gb00_OCT();//speaker

call ZOGLAB_Measure();
call Gb11_humid();
call Gb12_temp();
//call Gb15_dust_sensor();
SleepMilliseconds(3000);
call Gb03_Status();
call Gb04_disconnect();
call Gb03_DisconnectStatus();

call Gb20_OCTget();
$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n" , "", 100); //stop the sound

call Gb18_genkey();

call BootTopBoard();

call Gb14_Prox();

call Gb01_TOPver_Check();
// reset gesture count
$return= SerialSendMilliseconds($Launchpad_Handle, "gesture_count\r\n" , "", 100);
//SerialClose($Launchpad_Handle);
//call Gb08_Program_M4F();
////reboot
//$return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50);
//SleepMilliseconds(100);
//$return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50);
//$UUT_Serial = 9;
//$Launchpad_Handle = SerialOpen($UUT_Serial,115200,8,"N",1);
//
//call Gb10_ProdVER_Check();
//SerialSendMilliseconds($Launchpad_Handle, "loglevel 40\r\n", "", 100); 
//call BootTopBoard();
//SleepMilliseconds(2500);

call Gb21_GestureCnt();// reset gesture count before run this test

// Uncomment only on new FW ECO from hello, place the new FW in D:\factory_release_update-only\targets
//call Gb08_Program_M4F();
//all BootCheck();// fast boot check with log level 40
//call Gb10_ProdVER_Check();



End ;
////////////////////////////////////////main Script///////////////////////////////////////////////////////

function Gb_BarcodeCheck()
{
  UpdateStatus("**************************** Gb01_BarcodeCheck*********************************");  
   $nTry=0;
  Label labBarcodeCheckLoop:
  $value = StringLength($SerialNumber);         //M0401144900062
  if ($value != 21)
  {
    goto labBarcodeError;
  }
  
  $bit = StringStartsWith($SerialNumber,"91000008W3","TRUE");//91000008W301150500819
  $bit1 = StringStartsWith($SerialNumber,"91000008B3","TRUE");
  if (!$bit&&!$bit1)
  {
      goto labBarcodeError;
  }
  
  SetSerialNumberField($SerialNumber);
  UpdateStatus($SerialNumber);
  UpdateStatus("=============== Barcode Check PASS =============");
  UpdateStatus("============================================");
 RecordMeasurementPassFail("Barcode check","passed","passed",true,true);
  return;
  
  Label labBarcodeError:
  $nTry = $nTry + 1;
  if ($nTry > 3)
  {
    UpdateStatus("=============== Barcode Check Fail =============");
    $Failed_Tests = "Barcode Check Fail";
    Fail("Error Serial Number!");
  }
  
  $SerialNumber = OperatorInputPrompt("Please Input the Serial number,\n Then Press OK continute");
  goto labBarcodeCheckLoop;
  return;
}
function Gb_Instrument_Init()
{
  UpdateStatus("**************************** Instrument_Init*********************************");  
  OperatorPrompt("Connect USB cable","OK");
  
  $Sample_Serial = 10;
  //~ $UUT_Serial = 10;
  $UUT_Serial = 9;
  $Launchpad_Handle = SerialOpen($UUT_Serial,115200,8,"N",1);   
  $Launchpad_Handle1 = SerialOpen($Sample_Serial,115200,8,"N",1); 
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50); //set to normal pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50);  //sample switch on
  
  RecordMeasurementPassFail("instrument init","passed","passed",true,true);
  
  return;
}
function BootCheck()
{
   SetTestName("BootCheck")
  UpdateStatus("****************************BootCheck*********************************"); 
  
  $count=0;
  while($count < 30)
  {
  $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 100);  
  UpdateStatus($return);
  $Result = StringContains($return,"FreeRTOS");
  
   if($Result)
   {
     break;
   }
  SleepMilliseconds(100);
  $count=$count+1;
 }
  SerialSendMilliseconds($Launchpad_Handle, "loglevel 40\r\n", "", 100); 

   //sample board
   SerialSendMilliseconds($Launchpad_Handle1, "loglevel 40\r\n", "", 100); 
   SerialSendMilliseconds($Launchpad_Handle1, "led\r\n", "", 100);
   SerialSendMilliseconds($Launchpad_Handle1, "led stop\r\n", "", 100); 
    
  
 RecordMeasurementPassFail("FreeRTOS found","passed","passed",true,true);
  return;
}

function BootTopBoard()
{
   SetTestName("BootTopBoard")
  UpdateStatus("****************************BootTopBoard*********************************"); 
  
  SerialSendMilliseconds($Launchpad_Handle, "boot\r\n", "", 100); 

   SerialSendMilliseconds($Launchpad_Handle1, "boot\r\n", "", 100);
   
 RecordMeasurementPassFail("booting top board","passed","passed",true,true);
  return;
}

function Gb10_VER_Check()
{
  $Result = false;
  $TestName = "Check FW version";
  SetTestName($TestName);
  $VER_return="";
$VER_return1 = SerialSendMilliseconds($Launchpad_Handle, "ver\r\n", "", 100); 

  $cont =0;
  while( $cont < 3)
  {
  
  $VER_return=$VER_return+$VER_return1;
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  UpdateStatus($VER_return);
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  
  
  
$VerCount=0;
Label RetryVera:
  UpdateStatus($VER_return);
//  $SerRtn=$VER_return;
//      call filterSymbol();
//      $VER_return=$SerRtn;
  $ExpectedStr = StringContains($VER_return,"ver:");
  if ((!$ExpectedStr) && ($VerCount <= 30))
  {
    $VER_return = SerialSendMilliseconds($Launchpad_Handle, "", "", 100);
	UpdateStatus("Retry...");
	$VerCount=$VerCount+1;
	goto RetryVera;
  } 
  
  $VER_length = StringLength($VER_return);
  if($VER_length > 8)
  {
    break;
  }
  
  SleepMilliseconds(100);
  $cont = $cont +1;
  $VER_return1 = SerialSendMilliseconds($Launchpad_Handle, "", "", 100); 
  }

 
  //~ $VER_Num = StringCut($VER_return,"ver: ",1);
  $VER_Num = StringCut($VER_return,"ver: ",8);
  
  UpdateStatus($VER_Num);
  $Exp_VER ="23d5d2ad";
  $Result = StringComparison($VER_Num,$Exp_VER,"==");
  RecordMeasurementPassFail($TestName,$VER_Num,"Sting",true,$Result);
 
  return;
}

function Gb10_ProdVER_Check()
{
  $Result = false;
  $TestName = "Check Production FW version";
  SetTestName($TestName);

  $cont =0;
  while( $cont < 3)
  {
  
  $VER_return = SerialSendMilliseconds($Launchpad_Handle, "ver\r\n", "", 100); 
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  UpdateStatus($VER_return);
  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
$VerCount=0;
Label RetryVerb:
  UpdateStatus($VER_return);
//  $SerRtn=$VER_return;
//      call filterSymbol();
//      $VER_return=$SerRtn;
  $ExpectedStr = StringContains($VER_return,"ver:");
  if ((!$ExpectedStr) && ($VerCount <= 30))
  {
    $VER_return = SerialSendMilliseconds($Launchpad_Handle, "", "", 100);
	UpdateStatus("Retry...");
	$VerCount=$VerCount+1;
	goto RetryVerb;
  } 
  
  $VER_length = StringLength($VER_return);
  if($VER_length > 8)
  {
    break;
  }
  
  SleepMilliseconds(100);
  $cont = $cont +1;
  }

 
  //~ $VER_Num = StringCut($VER_return,"ver: ",1);
  $VER_Num = StringCut($VER_return,"ver: ",8);
  
  UpdateStatus($VER_Num);
  $Exp_VER ="43d87d7c";
  $Result = StringComparison($VER_Num,$Exp_VER,"==");
  RecordMeasurementPassFail($TestName,$VER_Num,"Sting",true,$Result);
 
  return;
}


function Gb00_OCT()
{
   SetTestName("Gb00_OCT")
  UpdateStatus("****************************Gb00_OCT*********************************"); 

  
  //uut record
  $return= SerialSendMilliseconds($MicHandler, "oct\r\n", "", 100);  
  UpdateStatus($return);

  return; 
}



function Gb01_TOPver_Check()
{
  SetTestName("Gb01_TOPver_Check")
  UpdateStatus("****************************Gb01_echo_hello*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=5;
  $Result=false;
  $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "^ ver\r\n", "", 100)
  $return1= SerialSendMilliseconds($Launchpad_Handle, "^ ver\r\n", "", 100); 
  
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return = $return+ $return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	
    $Pattern = "0.5.3";	
    ($Success,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
	
	if ($Success)
	{
//	   $Result = StringContains($return,"0.5.3"); //+echo hello
//	   if ($Result)
//	   {
	     break;
//	   }	  
	}
	SleepMilliseconds(100);
    $Cont_Retry= $Cont_Retry + 1;
	$return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 100);  
  }
  RecordMeasurementPassFail("top board FW version",$Success,"bool",true,$Success);	
 //$return= SerialSendMilliseconds($Launchpad_Handle, "^ dtm\r\n", "", 1000);  
  UpdateStatus($return);
  return;
}


function Gb02_rssi()
{
  SetTestName("Gb02_rssi")
  UpdateStatus("****************************Gb02_rssi*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=5;
  $Result=false;
  $return= SerialSendMilliseconds($Launchpad_Handle, "antsel 1\r\n", "", 100);  
  UpdateStatus($return);
  
  $return= SerialSendMilliseconds($Launchpad_Handle, "rssi\r\n", "", 100); 
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);  
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    
    $Pattern = "TP-LINK_A1A2AC";	
    ($Success,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
	
	// successful of getting 1st pattern
	if ($Success)
	{
       break;	  
	}
	SleepMilliseconds(500);
    $Cont_Retry= $Cont_Retry + 1;
  }
  RecordMeasurementPassFail("Gb02_rssi",$Success,"bool",true,$Success);	//TP-LINK_A1A2AC
  
  return;
}

function Gb03_connect()
{
  SetTestName("Gb03_connect")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
  
   $return= SerialSendMilliseconds($Launchpad_Handle, "connect TP-LINK_A1A2AC key 0\r\n", "", 1000);  
    UpdateStatus($return);

  
    RecordMeasurementPassFail("Wifi_connect","passed","bool",true,true);	//TP-LINK_A1A2AC
    return ;
}

function Gb03_Status()
{
  SetTestName("Gb03_Status")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
  $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "status\r\n", "", 500);  
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return= $return+$return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    

	   $Result = StringContains($return,"IP=192.168.1."); //+echo hello
	   if ($Result)
	   {
	     break;
	   }	  
  $return= SerialSendMilliseconds($Launchpad_Handle, "disconnect\r\n", "", 100); 
	   Sleep(1);
   $return= SerialSendMilliseconds($Launchpad_Handle, "connect TP-LINK_A1A2AC key 0\r\n", "", 3000);  
    //~ UpdateStatus($return);
    
	SleepMilliseconds(100);
    $Cont_Retry= $Cont_Retry + 1;
	$return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 500);  
  }
  
    RecordMeasurementPassFail("Wifi_connect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
    return ;
}

function Gb03_DisconnectStatus()
{
  SetTestName("Gb03_DisconnectStatus")
  UpdateStatus("****************************Gb03_connect*********************************"); 
  
  $Cont_Retry=0;
  $Max_Retry=10;
  $Result=false;
   $return="";
  $return1= SerialSendMilliseconds($Launchpad_Handle, "status\r\n", "", 500);  
  
  while ((!$Result)&& ($Cont_Retry < $Max_Retry))
  {
    $return= $return+$return1;
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    

	   $Result = StringContains($return,"IP=0.0.0.0"); //+echo hello
	   if ($Result)
	   {
	     break;
	   }	  

	SleepMilliseconds(100);
    $Cont_Retry= $Cont_Retry + 1;
	$return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 500); 
  }
  
    RecordMeasurementPassFail("Wifi_connect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
    return ;
}

function Gb04_disconnect()
{
  SetTestName("Gb04_disconnect")
  UpdateStatus("****************************Gb04_disconnect*********************************"); 
  $return= SerialSendMilliseconds($Launchpad_Handle, "disconnect\r\n", "", 100);  

 
  RecordMeasurementPassFail("Wifi_disconnect",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
  return ;
}


function Gb08_LED_ON()
{
  SetTestName("Gb08_LED_ON")
  UpdateStatus("****************************Gb08_LED_ON*********************************"); 

   //$return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 0 1 0\r\n", "", 100); 
     $return= SerialSendMilliseconds($Launchpad_Handle, "led\r\n", "", 100);  
   UpdateStatus($return);
   

  RecordMeasurementPassFail("LED ON",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}

function Gb08_LED_OFF()
{
  SetTestName("Gb08_LED_OFF")
  UpdateStatus("****************************Gb08_LED_OFF*********************************"); 

  // $return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 1 1 0\r\n", "", 100);  
  $return= SerialSendMilliseconds($Launchpad_Handle1, "led stop\r\n", "", 500);  // request from ben to ensure sample is off
   UpdateStatus($return);
  SleepMilliseconds(500);
  $return= SerialSendMilliseconds($Launchpad_Handle, "led stop\r\n", "", 500);  
   UpdateStatus($return);
   
   

  RecordMeasurementPassFail("LED OFF",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}
function Gb08_LED_1stOFF()
{
  SetTestName("Gb08_LED_OFF")
  UpdateStatus("****************************Gb08_LED_OFF*********************************"); 

  // $return= SerialSendMilliseconds($Launchpad_Handle, "led 254 254 254 1 1 1 0\r\n", "", 100);  
   
  $return= SerialSendMilliseconds($Launchpad_Handle, "animate stop\r\n", "", 500);  
   UpdateStatus($return);
   

  RecordMeasurementPassFail("LED OFF",$Result,"bool",true,true);	//TP-LINK_A1A2AC
  return ;
}



function Gb10_SD_Card_Read_Write()
{
    SetTestName("SD Test")
  UpdateStatus("****************************SD_Card_Read_Write*********************************"); 
   
  $return2= SerialSendMilliseconds($Launchpad_Handle, "cd RINGTONE\r\n" , "", 1000);  //
   UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return2);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	
	 $return1= SerialSendMilliseconds($Launchpad_Handle, "ls\r\n", "", 1500);  //   
 UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	$return=$return1;
	
  $count=0;
  while($count < 50)
    {
   $return1= SerialSendMilliseconds($Launchpad_Handle, "", "", 300);  //
  
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($return1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	$return=$return+$return1;
  $Result = StringContains($return,"ORG005.raw");
      
   if($Result )
      {
	break;
      }
      $count=$count+1;
    }
  
  $Result1 = StringContains($return,"tone.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR005.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR004.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR003.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR002.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"STAR001.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"pink.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG004.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG003.raw");
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"ORG001.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW006.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW005.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW004.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW003.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"NEW001.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG005.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG004.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG003.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG002.raw");  
  $Result=$Result1 && $Result;
  $Result1 = StringContains($return,"DIG001.raw");  
  $Result=$Result1 && $Result;
  
 
 RecordMeasurementPassFail("RINGTONE",$Result,"bool",true,$Result);	//TP-LINK_A1A2AC
  return;
}

function Gb11_humid()
{
  $TestName="humid_Test";
  $SendCmd="humid";
  $CmdTimeOut=100;
  $UpperLimit=$Humidity_H;
  $LowerLimit=$Humidity_L;
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=5;
  call GeneralTest1();
  
  
 return;
}

function Gb12_temp()
{
  $TestName="temp_Test";
  $SendCmd="temp";
  $CmdTimeOut=100;
  $UpperLimit=$Temperature_H;
  $LowerLimit=$Temperature_L;
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=5;
  call GeneralTest1();

return;
}
function Gb13_lightON()
{
  $TestName="light_Test";
  $SendCmd="light";
  $CmdTimeOut=100;
  $UpperLimit=70000;
  $LowerLimit=5000;
  $Pattern = "(-?)\\d{3,5}";
  $Max_Retry=5;
  call GeneralTest1();

  return;
}

function Gb13_lightOFF()
{
  $TestName="light_Test";
  $SendCmd="light";
  $CmdTimeOut=100;
  $UpperLimit=2000;
  $LowerLimit=0;
  $Pattern = "(-?)\\d{1,5}";
  $Max_Retry=10;
  call GeneralTest1();

  return;
}
function Gb21_GestureCnt()
{
  $TestName="Gesture_count_Test";
  $SendCmd="gesture_count";
  $CmdTimeOut=100;
  $UpperLimit=1;
  $LowerLimit=0;
  $Pattern = "\\d{1}";
  $Max_Retry=1;
  call GeneralTest1();
  
  
 return;
}

//$TestName="light_Test";
//$SendCmd="dust"
//$TrimStr="temp is "
//$CmdTimeOut=3000
//$UpperLimit=
//$LowerLimit=
//$Pattern = "(-?)\\d{3,5}";
//$Max_Retry=5;
function GeneralTest1()
{
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label General1_Retry:

    $CmdRtn1= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
$CmdRtn="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
//	$TempStr=$SendCmd + "\r\n";
//    $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
    $CmdRtn=$CmdRtn+$CmdRtn1;
	UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	//$Pattern = "(-?)\\d{3,5}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$Result_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
    UpdateStatus($FrameFound);
    if($FrameFound)
    {
	  UpdateStatus("Frame found!");
	  break;
    }
      SleepMilliseconds(100);      
   }
	  //~ OperatorPrompt("Programming Completed","OK");
	UpdateStatus($Result_Value);	
				if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				  UpdateStatus("not in spec, retry");
				  $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr, "", $CmdTimeOut); 
				  goto General1_Retry;
				}		
	
	
		
	
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true);  

return;
}



function Gb14_Prox()
{
  UpdateStatus("****************************Prox test*********************************"); 
  $TestName="Prox_Test";
  SetTestName($TestName);
  
  $Max_Retry=300;
  $Cont_Retry = 0;
 
  $GestureWin = OperatorPicturePromptNonBlockingWithButtons("Wave you hand on top of UUT","D:\\9398 hello tester_script\\ProxTest.jpg", "CENTER", 500,500,"Failed","Abort");
   
//  $Pattern = "Gesture:((.|\n|\r)*?)WAVE";
    $Pattern = "WAVE";
  $FailClick = false;
  $AbortClick = false;
  $GestFound = false;
  while (($FailClick==false) && ($AbortClick==false) && ($GestFound==false) && ($Cont_Retry < $Max_Retry))
  {
    $return= SerialSendMilliseconds($Launchpad_Handle, "", "", 800); 
	UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	UpdateStatus($return);
	UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	($GestFound,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($return,$Pattern);
  
    $FailClick = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($GestureWin,"Failed"); 
    $AbortClick = OperatorPicturePromptNonBlockingWithButtonsGetButtonState($GestureWin,"Abort"); 
    SleepMilliseconds(500);
    $Cont_Retry = $Cont_Retry + 1;
  }  
  CloseForm($GestureWin);

  if ($AbortClick==true)
  {
    Abort("User Abort!")
  }

  // GestFound will be update by the cRE_GeneralSingle
  RecordMeasurementPassFail("Prox test",$GestFound,"bool",true,$GestFound);
  
  return;
}

function Gb15_dust_sensor()
{
// comparison between UUT and sample
  $TestName="dust_sensor";
  $SendCmd="dust";
  $CmdTimeOut=1000;
  $UpperLimit=300;
  $LowerLimit=0;
  
//  call GeneralTest1(); 
$TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
   $Max_Retry=5;
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
  $TempStr=$SendCmd + "\r\n";
  
Label dust_Retry:

  $CmdRtnA= SerialSendMilliseconds($Launchpad_Handle,$TempStr , "", $CmdTimeOut); 
  $CmdRtnB= SerialSendMilliseconds($Launchpad_Handle1,$TempStr , "", $CmdTimeOut);
  $CmdRtn="";
  $CmdRtn1="";
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
//	$TempStr=$SendCmd + "\r\n";
//    $CmdRtn= SerialSendMilliseconds($Launchpad_Handle,$TempStr , "", $CmdTimeOut); 
    $CmdRtn=$CmdRtn+$CmdRtnA;
    UpdateStatus("^^^^^^^^^UUT^^^^^^^^^^^");
    UpdateStatus($CmdRtn);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	
	// sample
//	$CmdRtn1= SerialSendMilliseconds($Launchpad_Handle1,$TempStr , "", $CmdTimeOut); 
    $CmdRtn1=$CmdRtn1+$CmdRtnB;
	UpdateStatus("^^^^^^Sample^^^^^^^^^^^^^");
    UpdateStatus($CmdRtn1);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	
	$Pattern = "(-?)\\d{3,5}";
	UpdateStatus($Pattern);
	($FrameFound,$ErrMsg,$UUT_Value)=cRE_GeneralSingle($CmdRtn,$Pattern);
	($FrameFound1,$ErrMsg1,$Sample_Value)=cRE_GeneralSingle($CmdRtn1,$Pattern);
    UpdateStatus($FrameFound);
	UpdateStatus($FrameFound1);
    if (($FrameFound) && ($FrameFound1))
    {
	  UpdateStatus("Frame found!");
	  break;
    }
      SleepMilliseconds(100); 
	$CmdRtnA= SerialSendMilliseconds($Launchpad_Handle,"" , "", $CmdTimeOut);
	$CmdRtnB= SerialSendMilliseconds($Launchpad_Handle1,"" , "", $CmdTimeOut);
	  
   }
   
   
   UpdateStatus($UUT_Value);
   UpdateStatus($Sample_Value);
   
   $DiffValue=$UUT_Value-$Sample_Value;
	$DiffValue= Abs($DiffValue);
	UpdateStatus($DiffValue);
	// UUT value should not be less than 50
	// diff between sample and UUT should not more than 300
				if((($DiffValue < $LowerLimit ) || ($DiffValue > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				  UpdateStatus("not in spec, retry");
				  goto dust_Retry;
				}	
				
				if(($UUT_Value < 50 ) && ($Cont_Retry < $Max_Retry))
				{	      
				  UpdateStatus("UUT is less than 50, retry");
				  goto dust_Retry;
				}
				
				if($UUT_Value < 50 )
				{	      
				   RecordMeasurementPassFail($TestName,$UUT_Value,"UUT value less than 50",true,false);
				}
	
	RecordMeasurementWithLimits($TestName,$DiffValue,"",true,$LowerLimit,$UpperLimit,true);  

  
  
  return ;
}





//$MicHandler=$Launchpad_Handle
function Gb20_OCTget()
{
  $TestName="OCT Get";
  $UpperLimit=15500;
$LowerLimit=1000;
  $TempStr="****************************" & $TestName & "*********************************";
  UpdateStatus($TempStr); 
  SetTestName($TestName);
  
  $Sound_return="";
  $Max_Retry=50;
  $Cont_Retry = 0;
  $Result_Value=0;
  $FrameFound=false;
goto SkippedPlay;  
  
Label EvalSound_Retry:
//    $return= SerialSendMilliseconds($Launchpad_Handle1, "p 60 48000  RINGTONE/tone.raw\r\n" , "", 100);  
//    UpdateStatus($return);
//    $Sound_return= SerialSendMilliseconds($Launchpad_Handle, "oct\r\n", "", 100); 
//    Sleep(10);
Label SkippedPlay:
  Sleep(3);
  $Sound_return= SerialSendMilliseconds($MicHandler, "getoct\r\n", "", 300); 
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Sound_return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
  while($Cont_Retry < $Max_Retry)
  {
	$Cont_Retry = $Cont_Retry + 1;
    if ($Cont_Retry>1)
	{
     $Sound_return= SerialSendMilliseconds($MicHandler, "", "", 100); 
	}
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
    UpdateStatus($Sound_return);
    UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
		
	$Pattern = "(-?)\\d{3,5}((.|\n|\r)*?)";
	UpdateStatus($Sound_return);
	($FrameFound,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($Sound_return,$Pattern);

     UpdateStatus($FrameFound);
     if($FrameFound)
      {
	    UpdateStatus("Frame found!");
		break;
      }
     // SleepMilliseconds(100);      
	  // sample unit to stop sound
      //$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n", "", 100);  
    }
//    //$return= SerialSendMilliseconds($Launchpad_Handle1, "s\r\n", "", 100);  
//	
	if($FrameFound)// frame found within the retry count
    {
		// frame shall be found until here.
		// extract string
		// 1. extract the patter1 with "symbol && 3-5 digit && symbol"
		// 2. extract thepattern2 3-5 digit value with -?
		
//		$InputStr=$MatchedStr;
//		UpdateStatus($MatchedStr);
//		$Pattern1="[^A-Z,a-z,0-9]\\d{3,5}[^A-Z,a-z,0-9]";
		$Pattern2="(-?)\\d{3,5}";
//		($Success1,$ErrMsg,$MatchedStr)=cRE_GeneralSingle($InputStr,$Pattern1);
//		if ((!$Success1)&& ($Cont_Retry < $Max_Retry))
//		{
//			UpdateStatus("[^A-Z,a-z,0-9]\\d{3,5}[^A-Z,a-z,0-9], retry");
//			goto EvalSound_Retry;	
//		}
		// successful of getting 1st pattern
//		if ($Success1)
//		{
			UpdateStatus($MatchedStr);
			($Success,$ErrMsg,$Result_Value)=cRE_GeneralSingle($MatchedStr,$Pattern2);    
			if ((!$Success)&& ($Cont_Retry < $Max_Retry))
			{
				UpdateStatus("(-?)\\d{3,5} not found, retry");
				goto EvalSound_Retry;
			}	
			if ($Success)
			{
				UpdateStatus($Result_Value);	
				if((($Result_Value < $LowerLimit ) || ($Result_Value > $UpperLimit)) && ($Cont_Retry < $Max_Retry))
				{	      
				UpdateStatus("not in spec, retry");
				goto EvalSound_Retry;
				}				
			}
//		}
    }
	if(!$FrameFound)// frame found within the retry count
    {
	  UpdateStatus("Frame not found");
	}	
	
	RecordMeasurementWithLimits($TestName,$Result_Value,"",true,$LowerLimit,$UpperLimit,true); 
  
  return ;
}


function Gb18_genkey()
{
      UpdateStatus("****************************Gb18_genkey*********************************"); 
      $TestName="Gb18_genkey";
     
      SetTestName($TestName);
      $Result1 = false;
	      
	  $Max_Retry=120;
      $Cont_Retry = 0;
      $KeyLength=0;
	  $Keyreturn="";
  $KeyreturnA= SerialSendMilliseconds($Launchpad_Handle, "genkey\r\n", "", 100);  
     while($Cont_Retry < $Max_Retry)
     {
	  $Keyreturn = $Keyreturn + $KeyreturnA;// accum 
	  UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
      UpdateStatus($Keyreturn);
      UpdateStatus("^^^^^^^^^^^^^^^^^^^^^^^^");
	 	 
	 $KeyLength = StringLength($Keyreturn);
	 
	   if ($KeyLength>=140)
       {
	     UpdateStatus("Key found!");
	     break;
       }	 
	 $Cont_Retry = $Cont_Retry + 1;
	 $KeyreturnA= SerialSendMilliseconds($Launchpad_Handle, "", "", 100); 

     }
          
	
    $Result = StringContains($Keyreturn,"factory key:");
    if (($KeyLength>=140) && ($Result==true))
       {
	     $Result1=true;
       }
	
	
      
      $SNPath="D:\\genkey\\"+$SerialNumber+".txt";
      RecordMeasurementPassFail($TestName,$Result,"String",true,$Result1);
      $FileWriteObject = FileWriteOpen($SNPath,"NEW");//D:
      FileWrite($FileWriteObject,$Keyreturn);
      FileWriteClose($FileWriteObject);
  /////////////////////////////////////////////////
  return ;
}

//$Ser_Return
//$ExpectedStr
function filterStr()
{
UpdateStatus("****************************filterStr*********************************"); 
    
$FilterCount=0;
Label RetryFil:
  UpdateStatus($Ser_Return);
  $ExpectedFound = StringContains($Ser_Return,$ExpectedStr);
  if ((!$ExpectedFound) && ($FilterCount <= 10))
  {
    $Ser_Return = SerialSendMilliseconds($Launchpad_Handle, "", "", 1000);
	UpdateStatus("Retry...");
	$FilterCount=$FilterCount+1;
	goto RetryFil;
  } 
  UpdateStatus("****************************End filterStr*********************************"); 
    
return;
}

//$SerRtn
function filterSymbol()
{
UpdateStatus("****************************filterSymbol*********************************"); 
    
  $SerRtn = StringReplace($SerRtn,"R","");
  $SerRtn = StringReplace($SerRtn,"+","");
  $SerRtn = StringReplace($SerRtn,"~","");
return;
}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Cleanup()
{
    UpdateStatus("****************************GlobalCleanup*********************************"); 
     $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50);  //sample switch on
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch on 
	
	SerialClose($Launchpad_Handle);
SerialClose($Launchpad_Handle1);
    End ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function GlobalCleanup()
{
   UpdateStatus("****************************GlobalCleanup*********************************"); 
       
   
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50);  
    //~ $return= SerialSendMilliseconds($Userinterface_Handle, "#RK2$\r\n", "", 50);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RK9$\r\n", "", 50);  
    SerialClose($Userinterface_Handle);
	   SerialClose($ZOGLAB);
	
	$Userinterface_Serial = 2;
    $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#RKA$\r\n", "", 250);  
    SerialClose($Userinterface_Handle);
    End ;
}

function Initialize()
{
   UpdateStatus("****************************GlobalCleanup*********************************"); 
    $Userinterface_Serial = 2;
    $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
    $return= SerialSendMilliseconds($Userinterface_Handle, "#SK2$\r\n", "", 250);  
    SerialClose($Userinterface_Handle);
	
  $Userinterface_Serial = 2;    
  $Userinterface_Handle = SerialOpen($Userinterface_Serial,19200,8,"N",1);  
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RKA$\r\n", "", 50);  
  Sleep(2);
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK9$\r\n", "", 50);  

  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK2$\r\n", "", 50);  // light off
    $ZOGLAB = SerialOpen(1,9600,8,"N",1);
  SleepMilliseconds(100);
  SerialHandshakingManualSet($ZOGLAB, "RTS","FALSE");
	
	  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeInfo\\r\\n","",3);
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
  SleepMilliseconds(100);
  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeSysState\\r\\n","",3);
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
	
	
    End ;
}


function ZOGLAB_Measure()
{

 SetTestName("ZOGLAB_Measure")
  UpdateStatus("****************************ZOGLAB_Measure*********************************");
//  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeInfo\\r\\n","",3);
//  UpdateStatus("receiveBuffer...");
//  UpdateStatus($receiveBuffer);
//  SleepMilliseconds(100);
//  $receiveBuffer = SerialSend($ZOGLAB,"AT*TakeSysState\\r\\n","",3);
//  UpdateStatus("receiveBuffer...");
//  UpdateStatus($receiveBuffer);

  $receiveBuffer = SerialSend($ZOGLAB,"AT*ReadSensor:0\\r\\n","",2); //Read out the Humidity
  UpdateStatus("receiveBuffer...");
  UpdateStatus($receiveBuffer);
  $Temperature_Expect = StringCut($receiveBuffer,"Temperature = ",4);
  $Temperature_Expect = StringTrim($Temperature_Expect);
  $Humidity_Expect = StringCut($receiveBuffer,"Humidity = ",4);
  $Humidity_Expect = StringTrim($Humidity_Expect);
  UpdateStatus($Temperature_Expect);
  UpdateStatus($Humidity_Expect);
  $Temperature_L = ($Temperature_Expect*100) - 500;
  $Temperature_H = ($Temperature_Expect*100) + 500;
  $Humidity_L = ($Humidity_Expect*100) - 900;
  $Humidity_H = ($Humidity_Expect*100) + 700;
  RecordMeasurement("Temperature in fixture is",$Temperature_Expect,"C",true);
  RecordMeasurement("Humidity in fixture is",$Humidity_Expect,"%",true);
  return;
}


function Gb08_Program_M4F()
{
   UpdateStatus("****************************Gb08_Program_M4F*********************************"); 
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// install ============================================================
  $TestName="Programming";
  SetTestName($TestName);
  
	SerialClose($Launchpad_Handle);
  // set to program pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //program pin
   //Reboot UUT
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50); //uut switch off
   SleepMilliseconds(100);
   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //uut switch off

  
 //== check if the log files has been existing 
 $LogFilePath="D:\\factory_release_update-only\\log.txt";
 $fileExists= CheckFileExists($LogFilePath,"RETURNONLY");
 if($fileExists)
{  
  FileDelete($LogFilePath);
}



 $MID = "D:\\factory_release_update-only\\";
 SystemCall($MID,"D:\\factory_release_update-only\\Flash_mid.bat","","TRUE","TRUE");
 //== check if the files has been created../
// $Count = 0;
//while($Count < 100)
//{ 
// $fileExists= CheckFileExists($LogFilePath,"RETURNONLY");
// if($fileExists)
//{
//  Sleep(3);  // don't change this delay
//  $inUse = CheckFileInUse($LogFilePath);  
//  if(!$inUse)
//  {
//    OperatorPrompt("Device connection issue "," OK ");
//    Sleep(3);
//    Abort("Programming Fail");
//  }
//  //== power on ==
//  //~ OperatorPrompt("File has created, power up uut ","OK");
//   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //uut switch on
//  //== ==========================
//  Sleep(1);
//  break;
//}
//$Count = $Count + 1;
//SleepMilliseconds(500);
//}

// wait for programming finish
 $Count = 0;
while($Count < 30)
{
 $inUse = CheckFileInUse("D:\\factory_release_update-only\\log.txt");  
//~ $FileContents = FileReadAllText("D:\\factory_release\\log.txt");
//~ $Result = StringContains($FileContents,"<End of command>");
if(!$inUse)
{
  //~ OperatorPrompt("Programming Completed","OK");
    // $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
  
  break;
}
$Count = $Count + 1;
SleepMilliseconds(1000);
}

  // Reset to program pin
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK1$\r\n", "", 50); //uut switch off
  

//~ OperatorPrompt("SOP2 TO L","OK");
//SerialSendMilliseconds($Interface_Handle, "#RK1$\n","", 50);
//== Check result ====
$FileContents = FileReadAllText("D:\\factory_release_update-only\\log.txt");
UpdateStatus($FileContents);
//////////////////////////////////////////////////////////////////////////////////////////////
$String4="Progress (/sys/mcuimg1.bin): 100%";
$Result4 = StringContains($FileContents,$String4);
$Result=($Result4);
UpdateStatus($Result);
RecordMeasurementPassFail($TestName,"True","String",true,$Result);

  // set to normal pin
  $return= SerialSendMilliseconds($Userinterface_Handle, "#SK1$\r\n", "", 50); //program pin
     $Launchpad_Handle = SerialOpen($UUT_Serial,115200,8,"N",1);   

    //Reboot UUT
   $return= SerialSendMilliseconds($Userinterface_Handle, "#RK0$\r\n", "", 50); //uut switch off
   SleepMilliseconds(100);
   $return= SerialSendMilliseconds($Userinterface_Handle, "#SK0$\r\n", "", 50); //uut switch off
 //OperatorPrompt("visual check","OK");
   RecordMeasurementPassFail("Reboot done","True","true",true,true); 
 return ;
}